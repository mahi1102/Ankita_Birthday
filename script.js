// Global Variables
let stage = 0;
let candles = [];
let balloons = [];
let musicEnabled = true;
let soundEnabled = true;

// Date and Birthday System
const BIRTHDAY_DATE = '09-27'; // September 27th
const BIRTH_YEAR = 2001; // Ankita's birth year
const BIRTHDAY_YEAR = 2025; // Current birthday year
let isBirthdayToday = false;
let currentDayOfYear = 0;
let countdownInterval = null;

// Daily Background Themes (14 different themes)
const backgroundThemes = [
    {
        name: "Sunset Bliss",
        gradient: "linear-gradient(135deg, #667eea 0%, #764ba2 100%)",
        particles: "#ff6b6b",
        animation: "sunsetGlow"
    },
    {
        name: "Ocean Waves",
        gradient: "linear-gradient(135deg, #74b9ff 0%, #0984e3 100%)",
        particles: "#00cec9",
        animation: "waveMotion"
    },
    {
        name: "Forest Green",
        gradient: "linear-gradient(135deg, #00b894 0%, #00a085 100%)",
        particles: "#55a3ff",
        animation: "forestBreeze"
    },
    {
        name: "Sunset Orange",
        gradient: "linear-gradient(135deg, #fd79a8 0%, #fdcb6e 100%)",
        particles: "#e17055",
        animation: "orangeGlow"
    },
    {
        name: "Purple Dreams",
        gradient: "linear-gradient(135deg, #a29bfe 0%, #6c5ce7 100%)",
        particles: "#fd79a8",
        animation: "purplePulse"
    },
    {
        name: "Rose Garden",
        gradient: "linear-gradient(135deg, #fd79a8 0%, #e84393 100%)",
        particles: "#fdcb6e",
        animation: "roseBloom"
    },
    {
        name: "Golden Hour",
        gradient: "linear-gradient(135deg, #fdcb6e 0%, #e17055 100%)",
        particles: "#fd79a8",
        animation: "goldenShimmer"
    },
    {
        name: "Mint Fresh",
        gradient: "linear-gradient(135deg, #00cec9 0%, #00b894 100%)",
        particles: "#74b9ff",
        animation: "mintFlow"
    },
    {
        name: "Lavender Fields",
        gradient: "linear-gradient(135deg, #a29bfe 0%, #fd79a8 100%)",
        particles: "#fdcb6e",
        animation: "lavenderSway"
    },
    {
        name: "Coral Reef",
        gradient: "linear-gradient(135deg, #fd79a8 0%, #fdcb6e 100%)",
        particles: "#00cec9",
        animation: "coralDance"
    },
    {
        name: "Midnight Blue",
        gradient: "linear-gradient(135deg, #2d3436 0%, #636e72 100%)",
        particles: "#74b9ff",
        animation: "midnightTwinkle"
    },
    {
        name: "Peach Paradise",
        gradient: "linear-gradient(135deg, #fdcb6e 0%, #fd79a8 100%)",
        particles: "#00b894",
        animation: "peachGlow"
    },
    {
        name: "Emerald Forest",
        gradient: "linear-gradient(135deg, #00b894 0%, #55a3ff 100%)",
        particles: "#fdcb6e",
        animation: "emeraldShine"
    },
    {
        name: "Cosmic Purple",
        gradient: "linear-gradient(135deg, #6c5ce7 0%, #a29bfe 100%)",
        particles: "#fd79a8",
        animation: "cosmicFlow"
    }
];
let blessingMessages = [
    "ЁЯЩП рдЧрдЬрд╛рдирди рдорд╣рд╛рд░рд╛рдЬрд╛рдВрдЪреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рддреБрдордЪреНрдпрд╛рд╡рд░ рд░рд╛рд╣реЛрдд ЁЯЩП",
    "рд╕рджреНрдЧреБрд░реБ рдЧрдЬрд╛рдирди рдорд╣рд╛рд░рд╛рдЬрд╛рдВрдЪреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рддреБрдордЪреНрдпрд╛ рдЬреАрд╡рдирд╛рдд рд╕реБрдЦ, рд╢рд╛рдВрддреА рдЖрдгрд┐ рдЖрдирдВрдж рднрд░реВрди рдЯрд╛рдХреЛ ЁЯЩП",
    "рдЧрдЬрд╛рдирди рдорд╣рд╛рд░рд╛рдЬрд╛рдВрдЪреНрдпрд╛ рдХреГрдкреЗрдиреЗ рддреБрдордЪреНрдпрд╛ рдкреНрд░рддреНрдпреЗрдХ рдХрд╛рд░реНрдпрд╛рдд рдпрд╢ рд▓рд╛рднреЛ ЁЯМ╕",
    "рддреБрдордЪреНрдпрд╛ рдЖрдпреБрд╖реНрдпрд╛рдд рдЖрд░реЛрдЧреНрдп, рд╕рдорд╛рдзрд╛рди рдЖрдгрд┐ рд╕рдореГрджреНрдзреА рдирд╛рдВрджреЛ ЁЯЩП",
    "рдорд╣рд╛рд░рд╛рдЬрд╛рдВрдЪреНрдпрд╛ рдЪрд░рдгреА рдкреНрд░рд╛рд░реНрдердирд╛ тАФ рддреБрдордЪреНрдпрд╛ рдЬреАрд╡рдирд╛рдд рд╕рддрдд рдирд╡реАрди рд╕рдВрдзреА рдЖрдгрд┐ рдкреНрд░рдЧрддреА рдпреЗрдд рд░рд╛рд╣реЛ ЁЯЪА",
    "рд╕рджреНрдЧреБрд░реБрдВрдЪреНрдпрд╛ рдХреГрдкрд╛рд╢рд┐рд░реНрд╡рд╛рджрд╛рдиреЗ рддреБрдордЪреНрдпрд╛ рд╡рд╛рдЯрдЪрд╛рд▓реАрдд рдХрдзреАрд╣реА рдЕрдбрдерд│рд╛ рдпреЗрдК рдирдпреЗ ЁЯМ╝",
    "рдЧрдЬрд╛рдирди рдорд╣рд╛рд░рд╛рдЬрд╛рдВрдЪреА рдХреГрдкрд╛ рд╕рджреИрд╡ рддреБрдордЪреНрдпрд╛рд╡рд░ рдЖрдгрд┐ рддреБрдордЪреНрдпрд╛ рдкрд░рд┐рд╡рд╛рд░рд╛рд╡рд░ рд░рд╛рд╣реЛ ЁЯЩМ",
    "рдорд╣рд╛рд░рд╛рдЬ рддреБрдордЪреНрдпрд╛рддреАрд▓ рд╕рд╛рдорд░реНрдереНрдп рдЬрд╛рдЧреГрдд рдХрд░реВрди рдирд╡реЗ рдпрд╢ рдорд┐рд│рд╡рдгреНрдпрд╛рдЪреА рдкреНрд░реЗрд░рдгрд╛ рджреЗрд╡реЛрдд тЬи",
    "рд╕рджреНрдЧреБрд░реБ рдЧрдЬрд╛рдирди рдорд╣рд╛рд░рд╛рдЬрд╛рдВрдЪреНрдпрд╛ рдЖрд╢реАрд░реНрд╡рд╛рджрд╛рдиреЗ рддреБрдордЪреНрдпрд╛ рдЬреАрд╡рдирд╛рддреАрд▓ рдкреНрд░рддреНрдпреЗрдХ рджрд┐рд╡рд╕ рдордВрдЧрд▓рдордп рд╣реЛрд╡реЛ ЁЯМ║"
];
let currentBlessingIndex = 0;
let blessingShown = false;

// Daily Inspirational Thoughts (365 thoughts for each day of the year)
const dailyThoughts = [
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд╛, рдорд╛рд░реНрдЧ рд╕рд╛рдкрдбреЗрд▓.",
    "рднрдЬрди рдХреЗрд▓реНрдпрд╛рдиреЗ рдорди рд╢реБрджреНрдз рд╣реЛрддреЗ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╕реНрдорд░рдг рдореНрд╣рдгрдЬреЗрдЪ рд╢рдХреНрддреА.",
    "рджреЗрдгрд╛рд▒реНрдпрд╛рдЪрд╛ рд╣рд╛рдд рдХрдзреАрдЪ рд░рд┐рдХрд╛рдорд╛ рдирд╕рддреЛ.",
    "рд╕рдВрдпрдо рд╣реА рдЦрд░реА рд╕рд╛рдзрдирд╛ рдЖрд╣реЗ.",
    "рдХреНрд░реЛрдзрд╛рд╡рд░ рд╡рд┐рдЬрдп рдорд┐рд│рд╡рдгреЗ рдореНрд╣рдгрдЬреЗ рдореЛрдареЗ рдпрд╢.",
    "рдорди рдЬрд┐рдВрдХрд▓реЗ рдХреА рдЬрдЧ рдЬрд┐рдВрдХрд▓реЗ.",
    "рдкрд░рдореЗрд╢реНрд╡рд░рд╛рд╡рд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛.",
    "рдЗрддрд░рд╛рдВрдирд╛ рдорджрдд рдХрд░рд╛, рд╕реБрдЦ рджреБрдкреНрдкрдЯ рд╣реЛрдИрд▓.",
    "рд╕реНрд╡рд╛рд░реНрде рд╕реЛрдбрд╛, рд╕реЗрд╡рд╛ рдХрд░рд╛.",
    "рдирдореНрд░рддрд╛ рд╣реА рдЦрд░реА рд╢реЛрднрд╛ рдЖрд╣реЗ.",
    "рдордиреБрд╖реНрдпрд╛рдЪреЗ рдЦрд░реЗ рд╕реМрдВрджрд░реНрдп рддреНрдпрд╛рдЪреНрдпрд╛ рдЧреБрдгрд╛рдВрдд рдЕрд╕рддреЗ.",
    "рднрдХреНрддреАрдЪрд╛ рдорд╛рд░реНрдЧ рд╕рд░реНрд╡рд╛рдд рд╕реЛрдкрд╛ рдЖрд╣реЗ.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рд╕рдВрдкрддреНрддреА рд╡рд╛рдврддреЗ.",
    "рдЖрддреНрдордЬреНрдЮрд╛рдирд╛рдиреЗ рдЕрдЬреНрдЮрд╛рди рджреВрд░ рд╣реЛрддреЗ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рд╕рдВрдХрдЯреЗ рдЯрд│рддрд╛рдд.",
    "рд╕рддреНрдпрд╛рдЪрд╛ рдорд╛рд░реНрдЧ рдиреЗрд╣рдореА рд╕рд░рд│ рдЕрд╕рддреЛ.",
    "рд▓реЛрдн рдЯрд╛рд│рд╛, рдЖрдирдВрдж рдорд┐рд│рд╡рд╛.",
    "рдордирд╛рдд рд╢рд╛рдВрддреА рдареЗрд╡рд╛, рдЖрдпреБрд╖реНрдп рд╕реБрдВрджрд░ рд╣реЛрдИрд▓.",
    "рд╕рдВрддрд╛рдВрдЪреНрдпрд╛ рдЪрд░рдгреАрдЪ рдЦрд░реЗ рд╕реБрдЦ рдЖрд╣реЗ.",
    "рдирд┐рддреНрдп рд╕реНрдорд░рдг рдХрд░рд╛, рдирд┐рддреНрдп рдЖрдирдВрджреА рд░рд╛рд╣рд╛.",
    "рджреЗрд╡ рд╕рд░реНрд╡рддреНрд░ рдЖрд╣реЗ, рд╣реЗ рд╡рд┐рд╕рд░реВ рдирдХрд╛.",
    "рдЗрддрд░рд╛рдВрдЪрд╛ рд╕рдиреНрдорд╛рди рдХрд░рд╛, рддреБрдордЪрд╛ рд╕рдиреНрдорд╛рди рд╣реЛрдИрд▓.",
    "рдЙрдкрд╡рд╛рд╕рд╛рдиреЗ рдирд╡реНрд╣реЗ рддрд░ рдЙрдкрдХрд╛рд░рд╛рдиреЗ рдкреБрдгреНрдп рдорд┐рд│рддреЗ.",
    "рдЪрд╛рдВрдЧрд▓реА рд╕рдВрдЧрдд рд╣реАрдЪ рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗ.",
    "рд╕рдВрддреЛрд╖ рд╣реЗрдЪ рдЦрд░реЗ рдзрди рдЖрд╣реЗ.",
    "рдХрд╖реНрдЯрд╛рдиреЗрдЪ рдпрд╢ рдорд┐рд│рддреЗ.",
    "рдордирд╛рддрд▓реЗ рд╡рд╛рдИрдЯ рд╡рд┐рдЪрд╛рд░ рд╣рджреНрджрдкрд╛рд░ рдХрд░рд╛.",
    "рдХреНрд╖рдореЗрддрдЪ рдЦрд░рд╛ рдмрд│ рдЖрд╣реЗ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рддрдЪ рдорд╣рд╛рдирддрд╛ рдЖрд╣реЗ.",
    "рд╕рдорд╛рдзрд╛рдирд╛рдиреЗ рд░рд╛рд╣рд┐рд▓реНрдпрд╛рд╕ рдордирдГрд╢рд╛рдВрддреА рд▓рд╛рднрддреЗ.",
    "рдкреНрд░рд╛рд░реНрдердирд╛ рд╣реАрдЪ рдЦрд░реА рд╢рдХреНрддреА рдЖрд╣реЗ.",
    "рд╕рдВрдпрдорд╛рдиреЗ рдХреЗрд▓реЗрд▓реЗ рдХрд╛рд░реНрдп рдиреЗрд╣рдореА рдпрд╢рд╕реНрд╡реА рд╣реЛрддреЗ.",
    "рджреБрдГрдЦ рддрд╛рддреНрдкреБрд░рддреЗ рдЕрд╕рддреЗ, рд╢реНрд░рджреНрдзрд╛ рдХрд╛рдпрдо рдЕрд╕рддреЗ.",
    "рдкреНрд░реЗрдорд╛рдиреЗ рдЬрдЧ рдЬрд┐рдВрдХрд▓рдВ рдЬрд╛рдК рд╢рдХрддрдВ.",
    "рдЖрддреНрдореНрдпрд╛рдЪреЗ рдмрд│ рд╣реЗ рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рдЖрд╣реЗ.",
    "рдЧреБрд░реБрд╡рд┐рдирд╛ рдЬреНрдЮрд╛рди рдкреВрд░реНрдг рд╣реЛрдд рдирд╛рд╣реА.",
    "рдЕрд╣рдВрдХрд╛рд░ рд╣рд╛ рд╕рд░реНрд╡ рдЕрдирд░реНрдерд╛рдЪрд╛ рдореВрд│ рдЖрд╣реЗ.",
    "рднрдХреНрддрд╛рд▓рд╛ рдкрд░рдореЗрд╢реНрд╡рд░ рдиреЗрд╣рдореА рдЬрд╡рд│ рдЕрд╕рддреЛ.",
    "рдирд┐рдВрджреЗрд▓рд╛ рдЙрддреНрддрд░ рд╢рд╛рдВрддрддреЗрдиреЗ рджреНрдпрд╛.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рд╣реЗрдЪ рдорд╛рд░реНрдЧрджрд░реНрд╢рди рдЖрд╣реЗ.",
    "рд▓рд╣рд╛рдирд╛рд╕ рдореЛрдард╛ рдорд╛рди рджреНрдпрд╛.",
    "рд╕реЗрд╡рд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рдИрд╢реНрд╡рд░рдкреНрд░рд╛рдкреНрддреА рд╣реЛрддреЗ.",
    "рд▓реЛрднрд╛рдореБрд│реЗ рд╕реБрдЦ рдХрдзреАрдЪ рдорд┐рд│рдд рдирд╛рд╣реА.",
    "рд╕рдВрдпрдо рдЖрдгрд┐ рд╢реНрд░рджреНрдзрд╛ рдпрд╛ рджреЛрди рдкрдВрдЦрд╛рдВрдиреА рдЙрдВрдЪ рднрд░рд╛рд░реА рдШреЗрддрд╛ рдпреЗрддреЗ.",
    "рд╕рдВрдХрдЯ рдХрд╛рд│рд╛рдд рдзреИрд░реНрдп рд╕реЛрдбреВ рдирдХрд╛.",
    "рдЬреЗ рдШрдбрддреЗ рддреЗ рдЪрд╛рдВрдЧрд▓реНрдпрд╛рд╕рд╛рдареАрдЪ рдШрдбрддреЗ.",
    "рднрдХреНрддреА рд╣реА рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗ.",
    "рджреБрдГрдЦрд╛рддреВрдирдЪ рдЕрдиреБрднрд╡ рдорд┐рд│рддреЛ.",
    "рдЬреЗ рдорд┐рд│рд╛рд▓реЗ рдЖрд╣реЗ рддреНрдпрд╛рдд рдЖрдирдВрдж рдорд╛рдирд╛рд╡рд╛.",
    "рдордирдГрд╢рд╛рдВрддреА рд╣реАрдЪ рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдЖрдирдВрджрд╛рдд рдЖрдкрд▓рд╛ рдЖрдирдВрдж рд╢реЛрдзрд╛.",
    "рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рджреЗрд╡ рдиреЗрд╣рдореА рдорджрдд рдХрд░рддреЛ.",
    "рдкрд░реЛрдкрдХрд╛рд░ рд╣реЗрдЪ рдЦрд░реЗ рдзрд░реНрдо рдЖрд╣реЗ.",
    "рдЕрдкрдорд╛рди рд╕рд╣рди рдХреЗрд▓реНрдпрд╛рдиреЗ рдЖрддреНрдордмрд▓ рд╡рд╛рдврддреЗ.",
    "рдирдХреЛ рдЕрд╕рд▓реЗрд▓реНрдпрд╛ рдЧреЛрд╖реНрдЯреАрдВрдЪреА рдЗрдЪреНрдЫрд╛ рдХрд░реВ рдирдХрд╛.",
    "рд╕рдВрддрд╛рдВрдЪреНрдпрд╛ рдЪрд░рдгреА рд▓реАрди рдЭрд╛рд▓реНрдпрд╛рдиреЗ рднрдп рдирд╛рд╣реАрд╕реЗ рд╣реЛрддреЗ.",
    "рд╕рддреНрдХрд░реНрдо рдХреЗрд▓реНрдпрд╛рд╢рд┐рд╡рд╛рдп рдореЛрдХреНрд╖ рдирд╛рд╣реА.",
    "рдЬреНрдЮрд╛рди рдЖрдгрд┐ рднрдХреНрддреА рджреЛрдиреНрд╣реА рдЖрд╡рд╢реНрдпрдХ рдЖрд╣реЗрдд.",
    "рд╕реНрд╡рддрдГрдЪрд╛ рдЕрднрд┐рдорд╛рди рд╕реЛрдбрд╛, рджреЗрд╡ рддреБрдордЪрдВ рдХрд╛рд░реНрдп рдХрд░реЗрд▓.",
    "рджрдпреЗрдкреЗрдХреНрд╖рд╛ рдореЛрдардВ рджрд╛рди рдирд╛рд╣реА.",
    "рднрдХреНрддреА рдореНрд╣рдгрдЬреЗ рдЕрдВрддрдГрдХрд░рдгрд╛рдЪреА рд╕реНрд╡рдЪреНрдЫрддрд╛.",
    "рд╕рддреНрдп рдмреЛрд▓рдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рдкреВрдЬрд╛.",
    "рд╕рдВрддрд╛рдВрдЪреА рд╕реЗрд╡рд╛ рдореНрд╣рдгрдЬреЗрдЪ рджреЗрд╡рд╛рдЪреА рд╕реЗрд╡рд╛.",
    "рдХрд╖реНрдЯрд╛рд╢рд┐рд╡рд╛рдп рдлрд│ рдирд╛рд╣реА.",
    "рд╕рдВрддрд╛рдВрдЪреА рд╡рд╛рдгреА рдореНрд╣рдгрдЬреЗрдЪ рдЕрдореГрдд.",
    "рдирдореНрд░рддреЗрдиреЗ рд╡рд╛рдЧрд╛, рд╕рдЧрд│реНрдпрд╛рдВрдЪрдВ рдорди рдЬрд┐рдВрдХрд╛рд▓.",
    "рдИрд╢реНрд╡рд░ рд╕реНрдорд░рдгрд╛рдиреЗ рд╕рдВрдХрдЯрдВ рдирд╛рд╣реАрд╢реА рд╣реЛрддрд╛рдд.",
    "рдирд┐рд╕реНрд╡рд╛рд░реНрде рдкреНрд░реЗрдо рд╣реЗрдЪ рдЦрд░реЗ рдкреНрд░реЗрдо.",
    "рдЬреЗ рдЖрд╣реЗ рддреНрдпрд╛рдд рд╕рдорд╛рдзрд╛рди рд╢реЛрдзрд╛.",
    "рднрдХреНрддрд╛рд▓рд╛ рдИрд╢реНрд╡рд░ рдиреЗрд╣рдореА рд░рдХреНрд╖рдг рдХрд░рддреЛ.",
    "рдХреНрд░реЛрдзрд╛рд▓рд╛ рд╡рд╢ рд╣реЛрдК рдирдХрд╛.",
    "рдзрд░реНрдо рдореНрд╣рдгрдЬреЗ рдкрд░реЛрдкрдХрд╛рд░.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдорди рдкрд╡рд┐рддреНрд░ рд╣реЛрддрдВ.",
    "рд╕реНрд╡рд╛рд░реНрдерд╛рдореБрд│реЗрдЪ рджреБрдГрдЦ рд╡рд╛рдврддрдВ.",
    "рдЗрддрд░рд╛рдВрдЪрд╛ рдЕрдкрдорд╛рди рдЯрд╛рд│рд╛.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рдХрд╛рд░реНрдп рд╕рд┐рджреНрдз рд╣реЛрддрдВ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рдЖрд╢рд┐рд░реНрд╡рд╛рджрдЪ рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗрдд.",
    "рднрдХреНрддреАрдЪреНрдпрд╛ рдорд╛рд░реНрдЧрд╛рд╡рд░ рдЪрд╛рд▓рдгрд╛рд░рд╛ рдХрдзреАрдЪ рд╣рд░рд╡рдд рдирд╛рд╣реА.",
    "рд╕рддреНрдХрд░реНрдорд╛рдиреЗ рдХреАрд░реНрддреА рдорд┐рд│рддреЗ.",
    "рдЬреНрдЮрд╛рдирд╛рд╢рд┐рд╡рд╛рдп рдЕрдВрдзрд╛рд░ рдЖрд╣реЗ.",
    "рд╕рдВрддреЛрд╖ рдареЗрд╡рд╛, рд╕реБрдЦреА рд╡реНрд╣рд╛.",
    "рдЕрд╣рдВрдХрд╛рд░ рдЯрд╛рдХрд▓реНрдпрд╛рдиреЗрдЪ рдЖрдирдВрдж рдорд┐рд│рддреЛ.",
    "рджрдпрд╛, рдХреНрд╖рдорд╛ рдЖрдгрд┐ рдкреНрд░реЗрдо рд╣реНрдпрд╛ рдЬреАрд╡рдирд╛рдЪреНрдпрд╛ рдЦрд░реА рд╢реЛрднрд╛ рдЖрд╣реЗрдд.",
    "рджреЗрд╡ рд╕рд░реНрд╡рддреНрд░ рдЖрд╣реЗ, рд╣реЗ рдЬрд╛рдгрд▓рдВ рдХреА рднрдп рдирд╛рд╣реАрд╕рдВ рд╣реЛрддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪрдВ рднрд▓рдВ рдХрд░рд╛, рддреБрдордЪрдВ рднрд▓рдВ рдЖрдкреЛрдЖрдк рд╣реЛрдИрд▓.",
    "рдирд┐рдВрджрд╛ рдХрд░рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдЙрддреНрддрд░ рд╢рд╛рдВрддрддреЗрдд рджреНрдпрд╛.",
    "рд╕реЗрд╡рд╛, рд╕рд╛рдзрдирд╛, рдЖрдгрд┐ рд╕рддреНрдп тАФ рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪреЗ рдЖрдзрд╛рд░рд╕реНрддрдВрдн.",
    "рдорди рд╢рд╛рдВрдд рдЕрд╕реЗрд▓ рддрд░рдЪ рд╕рдорд╛рдзрд╛рди рд▓рд╛рднреЗрд▓.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд╛, рдИрд╢реНрд╡рд░ рдиреЗрд╣рдореА рд╕реЛрдмрдд рдЖрд╣реЗ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рджреБрдГрдЦрд╛рдд рд╕рд╣рднрд╛рдЧреА рд╡реНрд╣рд╛.",
    "рд▓реЛрднрд╛рдореБрд│реЗ рдордиреБрд╖реНрдпрд╛рдЪрд╛ рдирд╛рд╢ рд╣реЛрддреЛ.",
    "рджрдпрд╛рд│реВрдкрдгрд╛рдиреЗрдЪ рдЦрд░реЗ рдпрд╢ рдорд┐рд│рддреЗ.",
    "рджреЗрд╡ рднрдХреНрддрд╛рдЪреНрдпрд╛ рдЕрдВрддрдГрдХрд░рдгрд╛рдд рд╡рд╛рд╕ рдХрд░рддреЛ.",
    "рдХреНрд╖рдорд╛рд╢реАрд▓рддреЗрддрдЪ рдорд╣рд╛рдирддрд╛ рдЖрд╣реЗ.",
    "рднрдЬрди рдХреЗрд▓реНрдпрд╛рдиреЗ рдорди рдкреНрд░рд╕рдиреНрди рд╣реЛрддреЗ.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рдпрд╢ рд▓рд╛рдВрдм рдирд╕рддреЗ.",
    "рдирд┐рд╕рд░реНрдЧ рдореНрд╣рдгрдЬреЗ рдИрд╢реНрд╡рд░рд╛рдЪреА рдореВрд░реНрддреА.",
    "рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рд╡рд┐рдЪрд╛рд░рд╛рдВрдиреА рдЬреАрд╡рди рдЙрдЬрд│рддрдВ.",
    "рдирдореНрд░рддреЗрдиреЗ рдмреЛрд▓рдгрдВ рд╣реА рдЦрд░реА рд╕рдЬрд╛рд╡рдЯ рдЖрд╣реЗ.",
    "рд╕рддреНрдпрд╛рд╡рд░ рдард╛рдо рд░рд╛рд╣рд╛.",
    "рд╕рдВрддрд╛рдВрдЪрд╛ рдорд╛рд░реНрдЧ рдореНрд╣рдгрдЬреЗрдЪ рд╕реБрд░рдХреНрд╖рд┐рдд рдорд╛рд░реНрдЧ.",
    "рд╡реИрд░ рдорд┐рдЯрд╡рд╛, рдкреНрд░реЗрдо рдЬреЛрдбрд╛.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рддрдЪ рдкрд░рдореЗрд╢реНрд╡рд░ рднреЗрдЯрддреЛ.",
    "рд▓реЛрднреА рдорд╛рдгрд╕рд╛рд▓рд╛ рдХрдзреАрдЪ рд╢рд╛рдВрддреА рдорд┐рд│рдд рдирд╛рд╣реА.",
    "рднрдХреНрддреАрдиреЗ рдорди рдирд┐рд░реНрдорд│ рд╣реЛрддрдВ.",
    "рд╕рддреНрд╕рдВрдЧ рд╣реЗрдЪ рдЦрд░реЗ рд╡рд┐рджреНрдпрд╛рдкреАрда рдЖрд╣реЗ.",
    "рдЖрддреНрдореНрдпрд╛рдЪрдВ рд╕реБрдЦ рд╣реЗрдЪ рдЦрд░реЗ рд╕реБрдЦ.",
    "рдХрдзреАрд╣реА рдЦреЛрдЯрдВ рдмреЛрд▓реВ рдирдХрд╛.",
    "рд╕рджреНрд╡рд┐рдЪрд╛рд░рд╛рдВрдиреАрдЪ рд╕рдорд╛рдЬ рдмрджрд▓рддреЛ.",
    "рднрдХреНрддреА, рдЬреНрдЮрд╛рди рдЖрдгрд┐ рд╕реЗрд╡рд╛ рд╣реЗрдЪ рддреАрди рдЖрдзрд╛рд░ рдЖрд╣реЗрдд.",
    "рд╡рд╛рдИрдЯ рд╕рдВрдЧрдд рдЯрд╛рд│рд╛, рдЪрд╛рдВрдЧрд▓реА рд╕рдВрдЧрдд рдЬреЛрдбрд╛.",
    "рджреЗрд╡рд╛рд╡рд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рд╕рдЧрд│рдВ рд╕реБрд░рд│реАрдд рд╣реЛрдИрд▓.",
    "рд╕рдВрддрд╛рдВрдЪрд╛ рд╕реНрдорд░рдгрд╛рдиреЗ рд╣реГрджрдп рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рдХреНрд░реЛрдзрд╛рд▓рд╛ рдЖрд╡рд░ рдШрд╛рддрд▓реНрдпрд╛рдиреЗ рдореИрддреНрд░реА рдЬрдкрд▓реА рдЬрд╛рддреЗ.",
    "рджреЗрдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рдкреВрдЬрд╛.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдЖрдирдВрджрд╛рдд рдЖрдкрд▓рд╛ рдЖрдирдВрдж рд╢реЛрдзрд╛.",
    "рдЕрдкрдорд╛рди рдХреЗрд▓реНрдпрд╛рд╡рд░рд╣реА рд╢рд╛рдВрдд рд░рд╛рд╣рд╛.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗ рдкреБрдгреНрдп рдорд┐рд│рддреЗ.",
    "рдордирд╛рдд рд╢реНрд░рджреНрдзрд╛ рдЕрд╕реЗрд▓ рддрд░ рд╕рдВрдХрдЯрдВ рдХрд╛рд╣реАрдЪ рдирд╛рд╣реАрдд.",
    "рд╕рдВрддрд╛рдВрдЪрд╛ рдорд╛рд░реНрдЧ рдЪрд╛рд▓рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдХрдзреАрдЪ рднреАрддреА рд╡рд╛рдЯрдд рдирд╛рд╣реА.",
    "рд╕рджреНрд╡рд┐рдЪрд╛рд░рд╛рдВрдЪрд╛ рд╕рдВрдЧ рд╣рд╛ рдЕрдореВрд▓реНрдп рдЖрд╣реЗ.",
    "рд╕реЗрд╡рд╛ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рд╕рд╛рдзрдирд╛.",
    "рдордирдГрд╢рд╛рдВрддреА рд╣реАрдЪ рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗ.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдкреБрдгреНрдп рд╡рд╛рдврддреЗ.",
    "рд▓реЛрдн рдордиреБрд╖реНрдпрд╛рдЪрд╛ рд╕рд░реНрд╡рдирд╛рд╢ рдХрд░рддреЛ.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рд╣реГрджрдпрд╛рддрдЪ рджреЗрд╡ рд╡рд╛рд╕ рдХрд░рддреЛ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рдЖрд╢реАрд░реНрд╡рд╛рдж рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪреЗ рдЖрдзрд╛рд░ рдЖрд╣реЗрдд.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рд╕рдВрдХрдЯрдВ рд╕рд╣рдЬ рдирд┐рдШреВрди рдЬрд╛рддрд╛рдд.",
    "рд╕рддреНрдп рдорд╛рд░реНрдЧрд╛рд╡рд░ рдЪрд╛рд▓рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдпрд╢ рдирдХреНрдХреА рдорд┐рд│рддреЗ.",
    "рдирдореНрд░рддрд╛ рд╣реАрдЪ рдЦрд░реА рд╕рдЬрд╛рд╡рдЯ рдЖрд╣реЗ.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗрдЪ рдИрд╢реНрд╡рд░ рдкреНрд░рд╕рдиреНрди рд╣реЛрддреЛ.",
    "рднрдЬрдирд╛рдиреЗ рдорди рд╢реБрджреНрдз рд╣реЛрддрдВ.",
    "рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рд╕рдВрдЧрддреАрдд рдЬреАрд╡рди рдЙрдЬрд│рддрдВ.",
    "рджреЗрд╡ рд╕рд░реНрд╡рддреНрд░ рдЖрд╣реЗ, рд╣реЗ рдЬрд╛рдгрд▓рдВ рдХреА рдорди рд╢рд╛рдВрдд рд╣реЛрддрдВ.",
    "рдХреНрд╖рдорд╛рд╢реАрд▓рддреЗрдиреЗ рд╡реИрд░ рд╕рдВрдкрддреЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рдгрд╛рд░рд╛ рдХрдзреАрдЪ рдПрдХрдЯрд╛ рдирд╕рддреЛ.",
    "рд╕рдВрддрд╛рдВрдЪрд╛ рд╕реНрдорд░рдг рд╣реЗрдЪ рд╕рд░реНрд╡рд╢реНрд░реЗрд╖реНрда рд╕рд╛рдзрди рдЖрд╣реЗ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдорджрддреАрд▓рд╛ рдзрд╛рд╡рд╛, рджреЗрд╡ рддреБрдордЪреНрдпрд╛ рдорджрддреАрд▓рд╛ рдзрд╛рд╡реЗрд▓.",
    "рд╕рдВрдпрдо рдЖрдгрд┐ рд╢реНрд░рджреНрдзрд╛ рд╣реЗ рдЬреАрд╡рдирд╛рдЪреЗ рджреЛрди рдЖрдзрд╛рд░рд╕реНрддрдВрдн рдЖрд╣реЗрдд.",
    "рдирд┐рд╕реНрд╡рд╛рд░реНрде рдкреНрд░реЗрдо рд╣реЗрдЪ рдЦрд░реЗ рд╕реБрдЦ рдЖрд╣реЗ.",
    "рдЕрд╣рдВрдХрд╛рд░рд╛рдиреЗ рдордиреБрд╖реНрдп рдкрддрди рдкрд╛рд╡рддреЛ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗ рдЬрдЧрдгрдВ рд╣реЗрдЪ рдЦрд░рдВ рд╡реИрднрд╡ рдЖрд╣реЗ.",
    "рджрдпрд╛, рдзрд░реНрдо, рдЖрдгрд┐ рджрд╛рди тАУ рд╣реЗрдЪ рддреАрди рд░рддреНрди рдЖрд╣реЗрдд.",
    "рднрдХреНрддрд╛рд▓рд╛ рдкрд░рдореЗрд╢реНрд╡рд░ рдиреЗрд╣рдореА рд╕рд╛рде рджреЗрддреЛ.",
    "рдЬреНрдЮрд╛рдирд╛рд╢рд┐рд╡рд╛рдп рдЬреАрд╡рди рдЕрдВрдзрд╛рд░рдордп рдЖрд╣реЗ.",
    "рд╕рдВрддреЛрд╖ рдареЗрд╡рд╛, рддреЗрдЪ рдЦрд░реЗ рд╡реИрднрд╡ рдЖрд╣реЗ.",
    "рджреЗрд╡рд╛рд▓рд╛ рд╣рд╛рдХ рджрд┐рд▓реНрдпрд╛рд╡рд░ рддреЛ рдиреЗрд╣рдореА рдРрдХрддреЛ.",
    "рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рд╡рд┐рдЪрд╛рд░рд╛рдВрдиреА рдЬреАрд╡рди рд╕реБрдВрджрд░ рд╣реЛрддрдВ.",
    "рд╕рдВрддрд╛рдВрдЪреА рд╕рдВрдЧрдд рд╣реАрдЪ рдЦрд░реА рдкреБрдгреНрдпрд╛рдИ рдЖрд╣реЗ.",
    "рднрдХреНрддреАрдиреЗ рдорди рд╢реБрджреНрдз рд╣реЛрддрдВ, рдЖрдгрд┐ рд╢рд╛рдВрддреА рд▓рд╛рднрддреЗ.",
    "рд╕рдВрддрд╛рдВрдЪреНрдпрд╛ рдЪрд░рдгреА рд▓реАрди рдЭрд╛рд▓реНрдпрд╛рдиреЗ рднрдп рдирд╛рд╣реАрд╕рдВ рд╣реЛрддрдВ.",
    "рджреЗрд╡рд╛рдЪреНрдпрд╛ рдирд╛рд╡рд╛рдд рдЕрдкрд╛рд░ рд╢рдХреНрддреА рдЖрд╣реЗ.",
    "рд▓реЛрдн рдЯрд╛рдХрд▓реНрдпрд╛рдиреЗ рдорди рдЖрдирдВрджреА рд╣реЛрддрдВ.",
    "рд╕реЗрд╡рд╛ рд╣реАрдЪ рдЦрд░реА рдкреВрдЬрд╛ рдЖрд╣реЗ.",
    "рд╕рдВрдпрдорд╛рдиреЗ рд╡рд╛рдЧрд╛, рдпрд╢ рдирдХреНрдХреА рдорд┐рд│реЗрд▓.",
    "рджреБрд╕рд▒реНрдпрд╛рдВрдЪрд╛ рд╕рдиреНрдорд╛рди рдХрд░рд╛, рддреБрдордЪрд╛ рд╕рдиреНрдорд╛рди рд╡рд╛рдвреЗрд▓.",
    "рд╕рддреНрдпрд╛рд╡рд░ рдЪрд╛рд▓рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдХреЛрдгреАрд╣реА рд░реЛрдЦреВ рд╢рдХрдд рдирд╛рд╣реА.",
    "рднрдХреНрддреА рдореНрд╣рдгрдЬреЗ рджреЗрд╡рд╛рд╢реА рдирд╛рддрдВ рдЬреЛрдбрдгрдВ.",
    "рджрдпрд╛рд│реВрдкрдгрд╛рдиреЗрдЪ рдорд╛рдгреБрд╕рдХреА рдЬрд┐рд╡рдВрдд рд░рд╛рд╣рддреЗ.",
    "рдирд┐рдВрджрд╛ рдЯрд╛рд│рд╛, рд╕рддреНрдпрд╛рдЪрд╛ рд╕реНрд╡реАрдХрд╛рд░ рдХрд░рд╛.",
    "рд╕рд╛рдзреНрдпрд╛ рдЬреАрд╡рдирд╛рддрдЪ рдЦрд░реА рд╢реЛрднрд╛ рдЖрд╣реЗ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рдордирдГрд╢рд╛рдВрддреА рдорд┐рд│рддреЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд╛, рд╕рдВрдХрдЯрдВ рдирд╖реНрдЯ рд╣реЛрддреАрд▓.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдорди рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рд╕рд░реНрд╡ рдХрд╛рд╣реА рд╕рд╛рдзреНрдп рд╣реЛрддрдВ.",
    "рдкрд░рдореЗрд╢реНрд╡рд░рд╛рдЪреА рдЖрдард╡рдг рдареЗрд╡рд╛, рдЖрдирдВрдж рд▓рд╛рднреЗрд▓.",
    "рдЕрд╣рдВрдХрд╛рд░ рд╕реЛрдбрд╛, рдкреНрд░реЗрдо рдЬреЛрдбрд╛.",
    "рдордиреБрд╖реНрдпрд╛рдЪреНрдпрд╛ рдЕрдВрддрдГрдХрд░рдгрд╛рддрдЪ рджреЗрд╡рд╛рдЪрдВ рдордВрджрд┐рд░ рдЖрд╣реЗ.",
    "рд╕рддреНрдХрд░реНрдорд╛рдиреЗ рдЬреАрд╡рдирд╛рдЪрд╛ рдЦрд░рд╛ рдЕрд░реНрде рдХрд│рддреЛ.",
    "рд▓реЛрдн рдЖрдгрд┐ рдХреНрд░реЛрдз рд╣реЗрдЪ рджреБрдГрдЦрд╛рдЪреЗ рдореВрд│ рдЖрд╣реЗрдд.",
    "рд╕рдВрдпрдо рд╣рд╛ рд╕рд░реНрд╡ рд╕рджреНрдЧреБрдгрд╛рдВрдЪрд╛ рдкрд╛рдпрд╛ рдЖрд╣реЗ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рд╢реНрд░реАрдордВрддреА.",
    "рджреБрд╕рд▒реНрдпрд╛рд▓рд╛ рдорджрдд рдХрд░рдгрдВ рдореНрд╣рдгрдЬреЗ рджреЗрд╡рд╛рдЪреА рд╕реЗрд╡рд╛ рдХрд░рдгрдВ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рдореНрд╣рдгрдЬреЗ рдЬреАрд╡рдирд╛рдЪрд╛ рдкреНрд░рдХрд╛рд╢.",
    "рдХреНрд╖рдорд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рд╢реБрджреНрдз рд╣реЛрддрдВ.",
    "рд╢реНрд░рджреНрдзрд╛ рдЖрдгрд┐ рднрдХреНрддреАрдиреЗ рд╕рд░реНрд╡рдХрд╛рд╣реА рд╢рдХреНрдп рдЖрд╣реЗ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдЪреБрдХрд╛рдВрдХрдбреЗ рджреБрд░реНрд▓рдХреНрд╖ рдХрд░рд╛.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗ рд╕рдорд╛рдЬ рд╕реБрдВрджрд░ рд╣реЛрддреЛ.",
    "рдИрд╢реНрд╡рд░рд╛рд╡рд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рддреЛ рдХрдзреАрд╣реА рд╕рд╛рде рд╕реЛрдбрдд рдирд╛рд╣реА.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╕реНрдорд░рдг рдореНрд╣рдгрдЬреЗрдЪ рдЕрдореГрддрдкрд╛рди рдЖрд╣реЗ.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рд╕рдВрдХрдЯреЗ рд╕рд╣рдЬ рдкрд╛рд░ рд╣реЛрддрд╛рдд.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рдкреНрд░рд╛рд░реНрдердиреЗрд▓рд╛ рджреЗрд╡ рдиреЗрд╣рдореА рдЙрддреНрддрд░ рджреЗрддреЛ.",
    "рдирдореНрд░рддрд╛ рд╣рд╛ рдорд╛рдгрд╕рд╛рдЪрд╛ рдЦрд░рд╛ рдЕрд▓рдВрдХрд╛рд░ рдЖрд╣реЗ.",
    "рднрдЬрдирд╛рдиреЗ рдордирд╛рдд рдЖрдирдВрдж рдирд┐рд░реНрдорд╛рдг рд╣реЛрддреЛ.",
    "рд▓реЛрднрд╛рдореБрд│реЗрдЪ рд╢рд╛рдВрддреА рд╣рд░рд╡рддреЗ.",
    "рд╕реЗрд╡рд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рдкреБрдгреНрдп рд╡рд╛рдврддреЗ.",
    "рднрдХреНрддреАрдиреЗ рджреЗрд╡ рд▓рд╡рдХрд░ рдкреНрд░рд╕рдиреНрди рд╣реЛрддреЛ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рднрд▓реНрдпрд╛рдд рдЖрдкрд▓рдВ рднрд▓рдВ рджрдбрд▓реЗрд▓рдВ рдЖрд╣реЗ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗ рд╡рд╛рдЧрд╛, рд╕рдЧрд│реЗ рдЖрдкрд▓реЗ рд╣реЛрддреАрд▓.",
    "рд╕рддреНрдпрд╛рд╡рд░ рдард╛рдо рд░рд╛рд╣рд┐рд▓реНрдпрд╛рд╕ рд╡рд┐рдЬрдп рдирдХреНрдХреА рдорд┐рд│рддреЛ.",
    "рд╕рдВрддрд╛рдВрдЪреНрдпрд╛ рдЖрд╢рд┐рд░реНрд╡рд╛рджрд╛рдиреЗ рдЕрд╢рдХреНрдпрд╣реА рд╢рдХреНрдп рд╣реЛрддрдВ.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдиреЗрд╣рдореАрдЪ рдорд╛рд░реНрдЧ рдорд┐рд│рддреЛ.",
    "рд╕рдВрдпрдо рдЖрдгрд┐ рдкрд░рд┐рд╢реНрд░рдо рдпрд╛ рджреЛрдиреНрд╣реАрдиреЗ рдЬреАрд╡рди рд╕реБрдВрджрд░ рд╣реЛрддрдВ.",
    "рдХреНрд╖рдорд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рд╡реИрд░ рдирд╖реНрдЯ рд╣реЛрддрдВ.",
    "рд╕рддреНрдХрд░реНрдорд╛рдиреЗ рдХреАрд░реНрддреА рдЪрд┐рд░рдВрддрди рд░рд╛рд╣рддреЗ.",
    "рдкрд░реЛрдкрдХрд╛рд░ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░рд╛ рдзрд░реНрдо.",
    "рднрдХреНрддреА рд╣реАрдЪ рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗ.",
    "рдирдореНрд░рддреЗрдиреЗ рдХреЗрд▓реЗрд▓реЗ рдмреЛрд▓ рдорди рдЬрд┐рдВрдХрддрд╛рдд.",
    "рдХреНрд░реЛрдз рдЖрд▓реНрдпрд╛рд╕ рдореМрди рдзрд░рд╛.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рдЕрдВрдзрд╛рд░ рдирд╛рд╣реАрд╕рд╛ рд╣реЛрддреЛ.",
    "рд╕рдорд╛рдзрд╛рди рд╣реАрдЪ рдЦрд░реА рд╢реНрд░реАрдордВрддреА рдЖрд╣реЗ.",
    "рджреЗрд╡рд╛рдЪрдВ рдирд╛рд╡ рдШреЗрдгрд╛рд▒реНрдпрд╛рд▓рд╛ рднреАрддреА рдХрдзреА рд╡рд╛рдЯрдд рдирд╛рд╣реА.",
    "рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рд╕рдВрдЧрддреАрдд рдЖрдпреБрд╖реНрдп рдЖрдирдВрджреА рд╣реЛрддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдЪреБрдХрд╛ рдорд╛рдл рдХрд░рдгрдВ рд╣реЗрдЪ рдЦрд░рдВ рдкреБрдгреНрдп.",
    "рднрдХреНрддреАрдиреЗ рд╣реГрджрдпрд╛рдд рд╢рд╛рдВрддреА рдирд┐рд░реНрдорд╛рдг рд╣реЛрддреЗ.",
    "рджрдпрд╛рд│реВрдкрдгрд╛рдиреЗ рд╕рдорд╛рдЬ рдордЬрдмреВрдд рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рдорди рд╕реНрдерд┐рд░ рд░рд╛рд╣рддрдВ.",
    "рджреЗрд╡рд╛рд╡рд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд▓реНрдпрд╛рд╕ рдЕрдбрдЪрдгреА рдирд╛рд╣реАрд╢рд╛ рд╣реЛрддрд╛рдд.",
    "рд╕реЗрд╡рд╛ рдореНрд╣рдгрдЬреЗрдЪ рдИрд╢реНрд╡рд░рдкреНрд░реЗрдорд╛рдЪреА рдЦрд░реА рдкрд░реАрдХреНрд╖рд╛ рдЖрд╣реЗ.",
    "рднрдХреНрддрд╛рдЪреЗ рд╣реГрджрдп рд╣реЗрдЪ рджреЗрд╡рд╛рдЪреЗ рдЦрд░реЗ рдордВрджрд┐рд░ рдЖрд╣реЗ.",
    "рд╕рдВрдпрдо рд╣рд╛ рдЬреАрд╡рдирд╛рдЪрд╛ рдЦрд░рд╛ рдЕрд▓рдВрдХрд╛рд░ рдЖрд╣реЗ.",
    "рд╕рддреНрд╕рдВрдЧрд╛рдиреЗ рдЕрдВрдзрд╛рд░ рдирд╛рд╣реАрд╕рд╛ рд╣реЛрддреЛ.",
    "рд╕рддреНрдпрд╛рдЪрд╛ рдорд╛рд░реНрдЧ рдХрд╛рдЯреЗрд░реА рдЕрд╕рд▓рд╛ рддрд░реА рд╢реЗрд╡рдЯреА рдлрд│ рдЧреЛрдбрдЪ рдЕрд╕рддрдВ.",
    "рджрдпрд╛рд│реВрдкрдгрд╛рдиреЗ рд╢рддреНрд░реВрд╣реА рдорд┐рддреНрд░ рд╣реЛрддреЛ.",
    "рд▓реЛрднрд╛рдореБрд│реЗ рд╕реБрдЦ рд╣рд░рд╡рддреЗ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рд╕рдВрдХрдЯрдВ рджреВрд░ рд╣реЛрддрд╛рдд.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд╛, рдкрд░рдореЗрд╢реНрд╡рд░ рдиреЗрд╣рдореА рдЬрд╡рд│ рдЖрд╣реЗ.",
    "рд╕реЗрд╡рд╛ рдореНрд╣рдгрдЬреЗрдЪ рднрдХреНрддреАрдЪрдВ рдЦрд░рдВ рд░реВрдк рдЖрд╣реЗ.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рдЬреАрд╡рдирд╛рдЪрд╛ рдорд╛рд░реНрдЧ рд╕реБрдХрд░ рд╣реЛрддреЛ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдорджрддреАрд╕рд╛рдареА рдкреБрдвреЗ рдпрд╛.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪреЗ рджрд┐рд╢рд╛рджрд░реНрд╢рди рдЖрд╣реЗ.",
    "рдЕрд╣рдВрдХрд╛рд░рд╛рдореБрд│реЗ рдкрддрди рд╣реЛрддреЗ.",
    "рднрдХреНрддреАрдиреЗ рдордирд╛рдЪрдВ рдУрдЭрдВ рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗ рдЦрд░рд╛ рдЖрдирдВрдж рдорд┐рд│рддреЛ.",
    "рд╕рддреНрдп рдмреЛрд▓рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рднреАрддреА рдирд╕рддреЗ.",
    "рд╕рдВрдпрдо рд╣рд╛ рд╕рд░реНрд╡ рдпрд╢рд╛рдЪреА рдХрд┐рд▓реНрд▓реА рдЖрд╣реЗ.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдорди рд╢реБрджреНрдз рд╣реЛрддрдВ.",
    "рдирдореНрд░рддреЗрдиреЗ рд╡рд╛рдЧрдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рд╕рдЬрд╛рд╡рдЯ рдЖрд╣реЗ.",
    "рдХреНрд░реЛрдзрд╛рд╡рд░ рд╡рд┐рдЬрдп рдорд┐рд│рд╡рд▓реНрдпрд╛рдиреЗ рдЖрддреНрдордмрд▓ рд╡рд╛рдврддрдВ.",
    "рднрдХреНрддрд╛рд▓рд╛ рджреЗрд╡ рдиреЗрд╣рдореА рд╕рдВрд░рдХреНрд╖рдг рджреЗрддреЛ.",
    "рдЪрд╛рдВрдЧрд▓реНрдпрд╛ рд╡рд┐рдЪрд╛рд░рд╛рдВрдиреА рд╕рдорд╛рдЬ рд╕реБрдВрджрд░ рд╣реЛрддреЛ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗрдЪ рдЦрд░реА рд╢реНрд░реАрдордВрддреА рдорд┐рд│рддреЗ.",
    "рдХреНрд╖рдорд╛ рд╣реАрдЪ рдЦрд░реА рддрд╛рдХрдж рдЖрд╣реЗ.",
    "рд╕рдВрддрд╛рдВрдЪреНрдпрд╛ рдЪрд░рдгреА рд▓реАрди рдЭрд╛рд▓реНрдпрд╛рдиреЗ рднрдп рдирд╛рд╣реАрд╕рдВ рд╣реЛрддрдВ.",
    "рд╢реНрд░рджреНрдзреЗрдиреЗ рдХреЗрд▓реЗрд▓реА рдкреНрд░рд╛рд░реНрдердирд╛ рдиреЗрд╣рдореА рд╕рдлрд▓ рд╣реЛрддреЗ.",
    "рд╕рдВрдпрдорд╛рдиреЗ рдШреЗрддрд▓реЗрд▓реЗ рдирд┐рд░реНрдгрдп рдпреЛрдЧреНрдп рдард░рддрд╛рдд.",
    "рдкрд░реЛрдкрдХрд╛рд░ рдХреЗрд▓реНрдпрд╛рдиреЗ рдЬреАрд╡рди рдзрдиреНрдп рд╣реЛрддрдВ.",
    "рднрдХреНрддреАрдиреЗ рд╣реГрджрдп рдирд┐рд░реНрдорд│ рд╣реЛрддрдВ.",
    "рджреЗрд╡рд╛рдЪрдВ рдирд╛рд╡ рдШреЗрдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдХрдзреАрдЪ рд╣рд╛рд░ рдкрддреНрдХрд░рд╛рд╡реА рд▓рд╛рдЧрдд рдирд╛рд╣реА.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рдЖрд╢рд┐рд░реНрд╡рд╛рдж рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рд╢рдХреНрддреА рдЖрд╣реЗ.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рд╣реГрджрдпрд╛рдд рдиреЗрд╣рдореА рдЖрдирдВрдж рдлреБрд▓рддреЛ.",
    "рд╕рдВрдпрдо рдзрд░рд▓реНрдпрд╛рдиреЗ рдпрд╢ рд▓рд╛рдВрдм рдирд╛рд╣реА.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗ рдИрд╢реНрд╡рд░ рдкреНрд░рд╕рдиреНрди рд╣реЛрддреЛ.",
    "рд╕рддреНрдпрд╛рд╡рд░ рдард╛рдо рд░рд╛рд╣рдгрдВ рд╣реЗрдЪ рдЦрд░рдВ рдзреИрд░реНрдп рдЖрд╣реЗ.",
    "рджрдпрд╛ рд╣реАрдЪ рдорд╛рдгрд╕рд╛рдЪреА рдЦрд░реА рд╢реЛрднрд╛ рдЖрд╣реЗ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рдкрд╛рдкрдВ рдирд╛рд╣реАрд╢реА рд╣реЛрддрд╛рдд.",
    "рдирдореНрд░рддреЗрдиреЗ рд╡рд╛рдЧрдгрд╛рд░рд╛ рд╕рдЧрд│реНрдпрд╛рдВрдЪрд╛ рд▓рд╛рдбрдХрд╛ рд╣реЛрддреЛ.",
    "рд╢реНрд░рджреНрдзреЗрдиреЗ рдХреЗрд▓реЗрд▓реА рд╕реЗрд╡рд╛ рдИрд╢реНрд╡рд░рд╛рд▓рд╛ рдкреНрд░рд┐рдп рдЕрд╕рддреЗ.",
    "рд▓реЛрдн рдЖрдгрд┐ рдорддреНрд╕рд░ рдпрд╛рдореБрд│реЗ рдЖрдпреБрд╖реНрдп рдЕрдВрдзрд╛рд░рдордп рд╣реЛрддрдВ.",
    "рднрдХреНрддреАрдиреЗ рдЬреАрд╡рди рд╕реБрдВрджрд░ рд╣реЛрддрдВ.",
    "рд╕рдВрдпрдо рд╣рд╛ рд╕рд░реНрд╡ рдЧреБрдгрд╛рдВрдЪрд╛ рд░рд╛рдЬрд╛ рдЖрд╣реЗ.",
    "рджреЗрд╡рд╛рдЪрдВ рдирд╛рд╡ рд╣реЗрдЪ рд╕рд░реНрд╡ рджреБрдГрдЦрд╛рдВрдЪрдВ рдФрд╖рдз рдЖрд╣реЗ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдХрд▓реНрдпрд╛рдгрд╛рддрдЪ рдЖрдкрд▓рдВ рдЦрд░рдВ рднрд▓рдВ рдЖрд╣реЗ.",
    "рдХреНрд╖рдорд╛рд╢реАрд▓рддреЗрдиреЗ рд╣реГрджрдп рдкреНрд░рд╕рдиреНрди рд╣реЛрддрдВ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗ рдЬрдЧрдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рд╢реНрд░реАрдордВрддреА рдЖрд╣реЗ.",
    "рдкрд░реЛрдкрдХрд╛рд░ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рдкреВрдЬрд╛ рдЖрд╣реЗ.",
    "рд╕рддреНрдп рдмреЛрд▓рдгрд╛рд▒реНрдпрд╛рд▓рд╛ рдиреЗрд╣рдореА рд╡рд┐рдЬрдп рдорд┐рд│рддреЛ.",
    "рд╕рдВрддрд╛рдВрдЪреА рд╕рдВрдЧрдд рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪрдВ рд╕реМрдВрджрд░реНрдп рдЖрд╣реЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдЖрдгрд┐ рд╕рдВрдпрдорд╛рдиреЗ рд╕рдВрдХрдЯрдВ рдкрд╛рд░ рд╣реЛрддрд╛рдд.",
    "рд╕реЗрд╡рд╛ рдХрд░рдгрдВ рдореНрд╣рдгрдЬреЗ рджреЗрд╡рд╛рдЪреА рдХреГрдкрд╛ рдорд┐рд│рд╡рдгрдВ.",
    "рднрдХреНрддрд╛рдЪрдВ рдорди рдиреЗрд╣рдореА рдирд┐рд░реНрдорд│ рдЕрд╕рддрдВ.",
    "рд▓реЛрднрд╛рдореБрд│реЗ рдордиреБрд╖реНрдп рджреБрдГрдЦреА рд╣реЛрддреЛ.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪреА рджрд┐рд╢рд╛ рдЖрд╣реЗ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдорди рд╕реНрдерд┐рд░ рд╣реЛрддрдВ.",
    "рднрдХреНрддреАрдиреЗ рдкрд░рдореЗрд╢реНрд╡рд░ рд╕рд╣рдЬ рд╕рд╛рдкрдбрддреЛ.",
    "рд╕рддреНрдпрд╛рдЪрдВ рдкрд╛рд▓рди рдХрд░рдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рджреЗрд╡рд╛рдЪреА рд╕реЗрд╡рд╛ рдХрд░рдгрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рджреБрдГрдЦрд╛рдд рд╕рд╣рднрд╛рдЧреА рд╣реЛрдгрдВ рд╣реЗрдЪ рдЦрд░рдВ рджрд╛рди рдЖрд╣реЗ.",
    "рдирдореНрд░рддреЗрдиреЗ рдЬрдЧрдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рдЖрдпреБрд╖реНрдпрд╛рдЪрдВ рдЦрд░рдВ рд╕реМрдВрджрд░реНрдп рдЖрд╣реЗ.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рд╣реГрджрдпрд╛рдд рджреЗрд╡ рдиреЗрд╣рдореА рд╡рд╛рд╕ рдХрд░рддреЛ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рд╕рдВрдХрдЯрдВ рд╕рд╣рдЬ рдкрд╛рд░ рд╣реЛрддрд╛рдд.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рдЖрд╢рд┐рд░реНрд╡рд╛рдж рд╣реЗрдЪ рдЦрд░реЗ рдзрди рдЖрд╣реЗ.",
    "рднрдХреНрддреАрдиреЗ рдорди рдкреНрд░рд╕рдиреНрди рд╣реЛрддрдВ.",
    "рджрдпрд╛ рдЖрдгрд┐ рдХреНрд╖рдорд╛ рд╣реНрдпрд╛ рдорд╛рдгрд╕рд╛рдЪреА рдЦрд░реА рддрд╛рдХрдж рдЖрд╣реЗрдд.",
    "рд▓реЛрдн рдЯрд╛рд│рд▓реНрдпрд╛рдиреЗ рд╕реБрдЦ рдЯрд┐рдХрддрдВ.",
    "рд╕реЗрд╡рд╛ рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪрдВ рдЦрд░реЗ рдзреНрдпреЗрдп рдЖрд╣реЗ.",
    "рд╕рддреНрдп рдмреЛрд▓рд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рдирдореНрд░рддреЗрдиреЗ рдХреЗрд▓реЗрд▓рдВ рд╡рд░реНрддрди рд╕рд░реНрд╡рд╛рдВрдЪрдВ рдорди рдЬрд┐рдВрдХрддрдВ.",
    "рднрдХреНрддрд╛рдЪреЗ рд╣реГрджрдп рдирд┐рд░реНрдорд│ рд░рд╛рд╣рд┐рд▓реНрдпрд╛рд╕ рджреЗрд╡ рддреНрдпрд╛рдЪреНрдпрд╛рд╕реЛрдмрдд рдЕрд╕рддреЛ.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗ рд╕рдорд╛рдЬ рдордЬрдмреВрдд рд╣реЛрддреЛ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рднрдп рдирд╛рд╣реАрд╕рдВ рд╣реЛрддрдВ.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдорд╛рд░реНрдЧ рд╕реЛрдкрд╛ рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдЖрдгрд┐ рднрдХреНрддреА рдпрд╛ рджреЛрди рдкрдВрдЦрд╛рдВрдиреА рдЬреАрд╡рди рдЙрдВрдЪ рднрд░рд╛рд░реА рдШреЗрддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдорджрддреАрд╕рд╛рдареА рдкреБрдвреЗ рдпрд╛, рджреЗрд╡ рддреБрдордЪреНрдпрд╛ рдорджрддреАрд▓рд╛ рдзрд╛рд╡реЗрд▓.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗ рдЬрдЧрдгрдВ рдореНрд╣рдгрдЬреЗрдЪ рдЦрд░реА рд╕рдВрдкрддреНрддреА рдЖрд╣реЗ.",
    "рдЕрд╣рдВрдХрд╛рд░ рд╕реЛрдбрд▓реНрдпрд╛рдиреЗ рдорди рд╢рд╛рдВрдд рд░рд╛рд╣рддрдВ.",
    "рднрдХреНрддреА рдЖрдгрд┐ рдЬреНрдЮрд╛рди рд╣реЗ рдЬреАрд╡рдирд╛рдЪреЗ рджреЛрдиреНрд╣реА рдЖрдзрд╛рд░ рдЖрд╣реЗрдд.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪрд╛ рдкреНрд░рдХрд╛рд╢ рдЖрд╣реЗ.",
    "рд▓реЛрдн рдЖрдгрд┐ рдХреНрд░реЛрдз рдЯрд╛рд│рд▓реНрдпрд╛рдиреЗ рдЬреАрд╡рди рд╕реБрдХрд░ рд╣реЛрддрдВ.",
    "рд╕рддреНрдпрд╛рдЪрд╛ рдорд╛рд░реНрдЧ рдиреЗрд╣рдореА рдпрд╢рд╕реНрд╡реА рд╣реЛрддреЛ.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рдкреНрд░рд╛рд░реНрдердиреЗрд▓рд╛ рджреЗрд╡ рдиреЗрд╣рдореА рдЙрддреНрддрд░ рджреЗрддреЛ.",
    "рдирдореНрд░рддреЗрдиреЗ рд╡рд╛рдЧрдгрд╛рд░рд╛ рдорд╛рдгреВрд╕ рд╕рдЧрд│реНрдпрд╛рдВрдЪрд╛ рд▓рд╛рдбрдХрд╛ рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдирд┐рд░реНрдгрдп рдпреЛрдЧреНрдп рдард░рддрд╛рдд.",
    "рд╕реЗрд╡рд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рдкреБрдгреНрдп рдорд┐рд│рддрдВ.",
    "рднрдХреНрддреАрдиреЗ рд╣реГрджрдп рдирд┐рд░реНрдорд│ рд╣реЛрддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рджреБрдГрдЦрд╛рдд рд╕рд╣рднрд╛рдЧреА рд╣реЛрдгрдВ рд╣реЗрдЪ рдЦрд░реЗ рдзрд░реНрдо рдЖрд╣реЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдЖрдгрд┐ рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рд╕ рд╕рдВрдХрдЯрдВ рдкрд╛рд░ рд╣реЛрддрд╛рдд.",
    "рдЬреАрд╡рдирд╛рдд рджреЗрд╡рд╛рд╡рд░ рдкреВрд░реНрдг рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рддреЛ рдХрдзреАрдЪ рд╕рд╛рде рд╕реЛрдбрдд рдирд╛рд╣реА.",
    "рднрдХреНрддрд╛рдЪреЗ рд╣реГрджрдп рд╣реЗрдЪ рдЦрд░реЗ рдордВрджрд┐рд░ рдЖрд╣реЗ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╕реНрдорд░рдг рдиреЗрд╣рдореА рдорди рд╣рд▓рдХрдВ рдХрд░рддрдВ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдЕрдбрдЪрдгреА рд╕рд╣рдЬ рджреВрд░ рд╣реЛрддрд╛рдд.",
    "рднрдХреНрддреАрдиреЗ рдЬреАрд╡рдирд╛рдд рдкреНрд░рдХрд╛рд╢ рдпреЗрддреЛ.",
    "рд╕реЗрд╡рд╛ рдореНрд╣рдгрдЬреЗрдЪ рджреЗрд╡рд╛рдЪреА рдЦрд░реА рдкреВрдЬрд╛ рдЖрд╣реЗ.",
    "рджрдпрд╛ рдЖрдгрд┐ рдХреНрд╖рдорд╛ рд╣реНрдпрд╛ рдорд╛рдгрд╕рд╛рдЪрдВ рдЦрд░реЗ рд╡реИрднрд╡ рдЖрд╣реЗрдд.",
    "рд▓реЛрдн рдЖрдгрд┐ рдЕрд╣рдВрдХрд╛рд░ рдЯрд╛рд│рд▓реНрдпрд╛рдиреЗ рдорди рд╢рд╛рдВрдд рд░рд╛рд╣рддрдВ.",
    "рд╕рддреНрдп рдмреЛрд▓рд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рдкреНрд░рд╕рдиреНрди рд╣реЛрддрдВ.",
    "рдирдореНрд░рддреЗрдиреЗ рдХреЗрд▓реЗрд▓рдВ рд╡рд░реНрддрди рд╕рд░реНрд╡рд╛рдВрдЪрдВ рдорди рдЬрд┐рдВрдХрддрдВ.",
    "рднрдХреНрддреА рдЖрдгрд┐ рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рд╕рд░реНрд╡ рд╕рдВрдХрдЯ рджреВрд░ рд╣реЛрддрд╛рдд.",
    "рдкрд░реЛрдкрдХрд╛рд░ рд╣реЗрдЪ рдЦрд░реЗ рд╕реБрдЦ рдЖрд╣реЗ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рднрдп рдирд╛рд╣реАрд╕рдВ рд╣реЛрддрдВ.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдорд╛рд░реНрдЧ рд╕реЛрдкрд╛ рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдЖрдгрд┐ рднрдХреНрддреА рдпрд╛ рджреЛрдиреНрд╣реАрдиреЗ рдЬреАрд╡рди рд╕реБрдВрджрд░ рд╣реЛрддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдорджрддреАрд╕рд╛рдареА рдкреБрдвреЗ рдпрд╛, рджреЗрд╡ рддреБрдордЪреНрдпрд╛рд╕реЛрдмрдд рдЖрд╣реЗ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗ рдЬрдЧрдгрдВ рд╣реЗрдЪ рдЦрд░рдВ рд╡реИрднрд╡ рдЖрд╣реЗ.",
    "рдЕрд╣рдВрдХрд╛рд░ рд╕реЛрдбрд▓реНрдпрд╛рдиреЗ рдЬреАрд╡рди рд╕реБрд▓рдн рд╣реЛрддрдВ.",
    "рднрдХреНрддреА рдЖрдгрд┐ рдЬреНрдЮрд╛рди рдпрд╛рдВрдЪреНрдпрд╛рдореБрд│реЗ рдЖрддреНрдореНрдпрд╛рдЪрд╛ рдЙрдиреНрдирддреА рд╕рд╛рдзрддрд╛ рдпреЗрддреЛ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪрд╛ рдорд╛рд░реНрдЧрджрд░реНрд╢рдХ рдЖрд╣реЗ.",
    "рд▓реЛрдн рдЖрдгрд┐ рдХреНрд░реЛрдз рдЯрд╛рд│рд▓реНрдпрд╛рдиреЗ рдЖрдпреБрд╖реНрдп рд╕реБрдЦрдордп рд╣реЛрддрдВ.",
    "рд╕рддреНрдпрд╛рдЪрд╛ рдорд╛рд░реНрдЧ рдХрдзреАрд╣реА рд╣рд╛рд░рдд рдирд╛рд╣реА.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рдкреНрд░рд╛рд░реНрдердиреЗрд▓рд╛ рджреЗрд╡ рдиреЗрд╣рдореА рдЙрддреНрддрд░ рджреЗрддреЛ.",
    "рдирдореНрд░рддреЗрдиреЗ рд╡рд╛рдЧрдгрд╛рд░рд╛ рд╕рдЧрд│реНрдпрд╛рдВрдЪрд╛ рдкреНрд░рд┐рдп рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдирд┐рд░реНрдгрдп рдиреЗрд╣рдореА рдпреЛрдЧреНрдп рдард░рддрд╛рдд.",
    "рд╕реЗрд╡рд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рдкреБрдгреНрдп рдорд┐рд│рддреЗ рдЖрдгрд┐ рдорди рд╕рдорд╛рдзрд╛рди рдорд┐рд│рддреЗ.",
    "рднрдХреНрддреАрдиреЗ рд╣реГрджрдп рдирд┐рд░реНрдорд│ рд╣реЛрддрдВ рдЖрдгрд┐ рд╢рд╛рдВрддреА рд▓рд╛рднрддреЗ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рджреБрдГрдЦрд╛рдд рд╕рд╣рднрд╛рдЧреА рд╣реЛрдгрдВ рд╣реЗрдЪ рдЦрд░реЗ рдзрд░реНрдо рдЖрд╣реЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдЖрдгрд┐ рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рд╕ рд╕рд░реНрд╡ рд╕рдВрдХрдЯрдВ рджреВрд░ рд╣реЛрддрд╛рдд.",
    "рдЬреАрд╡рдирд╛рдд рджреЗрд╡рд╛рд╡рд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рддреЛ рдХрдзреАрдЪ рд╕рд╛рде рд╕реЛрдбрдд рдирд╛рд╣реА.",
    "рднрдХреНрддрд╛рдВрдЪреЗ рд╣реГрджрдп рдиреЗрд╣рдореА рдирд┐рд░реНрдорд│ рд░рд╛рд╣рд╛рд╡реЗ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╕реНрдорд░рдг рдХреЗрд▓реНрдпрд╛рдиреЗ рдЬреАрд╡рди рд╣рд▓рдХреЗ рд╣реЛрддреЗ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рд╕рдВрдХрдЯрдВ рд╕рд╣рдЬ рдирд┐рдШреВрди рдЬрд╛рддрд╛рдд.",
    "рднрдХреНрддреАрдиреЗ рд╣реГрджрдпрд╛рдд рдкреНрд░рдХрд╛рд╢ рдирд┐рд░реНрдорд╛рдг рд╣реЛрддреЛ.",
    "рд╕реЗрд╡рд╛ рд╣реАрдЪ рдЦрд░реА рднрдХреНрддреА рдЖрд╣реЗ.",
    "рджрдпрд╛ рдЖрдгрд┐ рдХреНрд╖рдорд╛ рд╣реНрдпрд╛ рдорд╛рдгрд╕рд╛рдЪреА рдЦрд░реА рддрд╛рдХрдж рдЖрд╣реЗрдд.",
    "рд▓реЛрдн рдЯрд╛рд│рд▓реНрдпрд╛рдиреЗ рд╕реБрдЦ рдЯрд┐рдХрддрдВ.",
    "рд╕рддреНрдп рдмреЛрд▓рд▓реНрдпрд╛рдиреЗ рдорди рдкреНрд░рд╕рдиреНрди рд╣реЛрддрдВ.",
    "рдирдореНрд░рддреЗрдиреЗ рдХреЗрд▓реЗрд▓реЗ рд╡рд░реНрддрди рд╕рд░реНрд╡рд╛рдВрдЪрдВ рдорди рдЬрд┐рдВрдХрддреЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдЖрдгрд┐ рднрдХреНрддреА рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рд╕рд░реНрд╡ рд╕рдВрдХрдЯ рджреВрд░ рд╣реЛрддрд╛рдд.",
    "рдкрд░реЛрдкрдХрд╛рд░рд╛рдиреЗ рдЖрдпреБрд╖реНрдп рд╕реБрдВрджрд░ рд╣реЛрддрдВ.",
    "рд╕рдВрддрд╕реНрдорд░рдгрд╛рдиреЗ рднрдп рдирд╛рд╣реАрд╕рдВ рд╣реЛрддрдВ.",
    "рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдорд╛рд░реНрдЧ рд╕реЛрдкрд╛ рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдЖрдгрд┐ рднрдХреНрддреАрдиреЗ рдЬреАрд╡рди рдЙрдЬрд│рддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рдорджрддреАрд╕рд╛рдареА рдкреБрдвреЗ рдпрд╛, рджреЗрд╡ рддреБрдордЪреНрдпрд╛рд╕реЛрдмрдд рдЖрд╣реЗ.",
    "рд╕рд╛рдзреЗрдкрдгрд╛рдиреЗ рдЬрдЧрдгрдВ рд╣реЗрдЪ рдЦрд░реЗ рд╡реИрднрд╡ рдЖрд╣реЗ.",
    "рдЕрд╣рдВрдХрд╛рд░ рд╕реЛрдбрд▓реНрдпрд╛рдиреЗ рдорди рд╢рд╛рдВрдд рд░рд╛рд╣рддрдВ.",
    "рднрдХреНрддреА рдЖрдгрд┐ рдЬреНрдЮрд╛рдирд╛рдиреЗ рдЖрддреНрдореНрдпрд╛рдЪрд╛ рд╡рд┐рдХрд╛рд╕ рд╣реЛрддреЛ.",
    "рд╕рдВрддрд╛рдВрдЪреЗ рд╡рдЪрди рд╣реЗрдЪ рдЬреАрд╡рдирд╛рдЪрд╛ рдкреНрд░рдХрд╛рд╢ рдЖрд╣реЗ.",
    "рд▓реЛрдн рдЖрдгрд┐ рдХреНрд░реЛрдз рдЯрд╛рд│рд▓реНрдпрд╛рдиреЗ рдЖрдпреБрд╖реНрдп рд╕реБрдЦрдордп рд╣реЛрддрдВ.",
    "рд╕рддреНрдпрд╛рдЪрд╛ рдорд╛рд░реНрдЧ рдХрдзреАрдЪ рд╣рд░рдд рдирд╛рд╣реА.",
    "рджрд╛рди рджрд┐рд▓реНрдпрд╛рдиреЗ рдЕрдВрддрдГрдХрд░рдг рд╣рд▓рдХрдВ рд╣реЛрддрдВ.",
    "рднрдХреНрддрд╛рдЪреНрдпрд╛ рдкреНрд░рд╛рд░реНрдердиреЗрд▓рд╛ рджреЗрд╡ рдиреЗрд╣рдореА рдЙрддреНрддрд░ рджреЗрддреЛ.",
    "рдирдореНрд░рддреЗрдиреЗ рд╡рд╛рдЧрдгрд╛рд░рд╛ рд╕рд░реНрд╡рд╛рдВрдЪрд╛ рдкреНрд░рд┐рдп рд╣реЛрддреЛ.",
    "рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рдиреЗ рдирд┐рд░реНрдгрдп рдпреЛрдЧреНрдп рдард░рддрд╛рдд.",
    "рд╕реЗрд╡рд╛ рдХреЗрд▓реНрдпрд╛рдиреЗ рдкреБрдгреНрдп рдЖрдгрд┐ рдЖрдирдВрдж рдорд┐рд│рддреЛ.",
    "рднрдХреНрддреАрдиреЗ рд╣реГрджрдп рдирд┐рд░реНрдорд│ рд╣реЛрддрдВ.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рджреБрдГрдЦрд╛рдд рд╕рд╣рднрд╛рдЧреА рд╣реЛрдгрдВ рд╣реЗрдЪ рдЦрд░реЗ рдзрд░реНрдо рдЖрд╣реЗ.",
    "рд╢реНрд░рджреНрдзрд╛ рдЖрдгрд┐ рд╕рдВрдпрдо рдареЗрд╡рд▓реНрдпрд╛рд╕ рд╕рд░реНрд╡ рд╕рдВрдХрдЯрдВ рджреВрд░ рд╣реЛрддрд╛рдд.",
    "рдЬреАрд╡рдирд╛рдд рджреЗрд╡рд╛рд╡рд░ рдкреВрд░реНрдг рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рддреЛ рдХрдзреАрдЪ рд╕рд╛рде рд╕реЛрдбрдд рдирд╛рд╣реА.",
    "рднрдХреНрддреА рдЖрдгрд┐ рд╢реНрд░рджреНрдзрд╛ рдареЗрд╡рд▓реНрдпрд╛рд╕ рдЬреАрд╡рдирд╛рдд рдХрдзреАрдЪ рдЕрдВрдзрд╛рд░ рдпреЗрдд рдирд╛рд╣реА.",
    "рджреБрд╕рд▒реНрдпрд╛рдЪреНрдпрд╛ рднрд▓реНрдпрд╛рд╕рд╛рдареА рдХреЗрд▓реЗрд▓реЗ рдХрд╛рд░реНрдп рджреЗрд╡рд╛рд▓рд╛ рдкреНрд░рд┐рдп рдЖрд╣реЗ.",
    "рд╕рдВрдпрдо, рд╕реЗрд╡рд╛ рдЖрдгрд┐ рдкреНрд░реЗрдо рд╣реНрдпрд╛ рддреАрди рдЧреЛрд╖реНрдЯреА рдЬреАрд╡рдирд╛рдЪрд╛ рдЖрдзрд╛рд░ рдЖрд╣реЗрдд.",
    "рдЬреАрд╡рдирд╛рдд рд╕рджреИрд╡ рдИрд╢реНрд╡рд░рд╛рд╡рд░ рд╡рд┐рд╢реНрд╡рд╛рд╕ рдареЗрд╡рд╛, рддреЛ рдХрдзреАрдЪ рд╕реЛрдмрдд рд╕реЛрдбрдд рдирд╛рд╣реА."
];

// Apply daily background theme
function applyDailyBackground() {
    const today = new Date();
    const dayOfYear = Math.floor((today - new Date(today.getFullYear(), 0, 0)) / (1000 * 60 * 60 * 24));
    const themeIndex = dayOfYear % backgroundThemes.length;
    const theme = backgroundThemes[themeIndex];
    
    // Apply gradient background
    document.body.style.background = theme.gradient;
    
    // Update CSS custom properties for animations
    document.documentElement.style.setProperty('--particle-color', theme.particles);
    document.documentElement.style.setProperty('--current-animation', theme.animation);
    
    // Add theme class for specific animations
    document.body.className = document.body.className.replace(/theme-\w+/g, '');
    document.body.classList.add(`theme-${theme.animation}`);
    
    console.log(`Applied theme: ${theme.name} (Day ${dayOfYear} of year)`);
}

// Initialize
document.addEventListener('DOMContentLoaded', function() {
    applyDailyBackground();
    checkBirthdayAndInitialize();
});

// Main initialization function
function checkBirthdayAndInitialize() {
    const today = new Date();
    const currentDate = today.getDate().toString().padStart(2, '0');
    const currentMonth = (today.getMonth() + 1).toString().padStart(2, '0');
    const currentYear = today.getFullYear();
    
    // Check if today is birthday
    const todayString = `${currentMonth}-${currentDate}`;
    isBirthdayToday = (todayString === BIRTHDAY_DATE);
    
    // Calculate day of year (1-365)
    const startOfYear = new Date(currentYear, 0, 1);
    const timeDiff = today.getTime() - startOfYear.getTime();
    currentDayOfYear = Math.floor(timeDiff / (1000 * 3600 * 24)) + 1;
    
    // Initialize based on whether it's birthday or not
    if (isBirthdayToday) {
        initializeBirthdayMode();
    } else {
        initializeDailyThoughtMode();
    }
    
    // Always initialize common features
    initModernEffects();
    initDynamicLighting();
    initInteractiveFireworks();
    initAdvancedBackground();
    initPhotoGallery();
    updateDateDisplay();
    setupMidnightRefresh();
}

// Birthday mode initialization
function initializeBirthdayMode() {
    document.body.classList.add('birthday-mode');
    
    // Hide photo gallery on birthday
    const photoGallery = document.querySelector('.photo-gallery');
    if (photoGallery) {
        photoGallery.style.display = 'none';
    }
    
    // Hide countdown timer on birthday
    const countdownSection = document.querySelector('.countdown-section');
    if (countdownSection) {
        countdownSection.style.display = 'none';
    }
    
    // Start birthday countdown animation (3, 2, 1, Boom!)
    startBirthdayCountdown();
}

// Daily thought mode initialization
function initializeDailyThoughtMode() {
    document.body.classList.remove('birthday-mode');
    showMainDashboard();
    
    // Show photo gallery on non-birthday days
    const photoGallery = document.querySelector('.photo-gallery');
    if (photoGallery) {
        photoGallery.style.display = 'block';
    }
    
    // Show countdown timer on non-birthday days
    const countdownSection = document.querySelector('.countdown-section');
    if (countdownSection) {
        countdownSection.style.display = 'block';
    }
    
    // Hide birthday countdown on non-birthday days
    const birthdayCountdown = document.getElementById('birthdayCountdown');
    if (birthdayCountdown) {
        birthdayCountdown.style.display = 'none';
    }
}

// Show main dashboard with all features
function showMainDashboard() {
    const mainDashboard = document.getElementById('mainDashboard');
    
    // Calculate and display age
    updateAgeDisplay();
    
    // Start countdown timer
    startCountdownTimer();
    
    // Show daily thought
    showDailyThoughtCard();
    
    // Update stats
    updateStats();
    
    // Show dashboard with animation
    setTimeout(() => {
        mainDashboard.classList.add('show');
    }, 500);
}

// Update age display
function updateAgeDisplay() {
    const today = new Date();
    const birthDate = new Date(BIRTH_YEAR, 8, 27); // September 27, 2001
    
    let age = today.getFullYear() - birthDate.getFullYear();
    const monthDiff = today.getMonth() - birthDate.getMonth();
    
    if (monthDiff < 0 || (monthDiff === 0 && today.getDate() < birthDate.getDate())) {
        age--;
    }
    
    document.getElementById('ageNumber').textContent = age;
    document.getElementById('birthYear').textContent = `рдЬрдиреНрдо: ${BIRTH_YEAR}`;
}

// Start countdown timer
function startCountdownTimer() {
    updateCountdown();
    countdownInterval = setInterval(updateCountdown, 1000);
}

// Update countdown display
function updateCountdown() {
    // Don't update countdown on birthday
    if (document.body.classList.contains('birthday-mode')) {
        return;
    }
    
    const now = new Date();
    const nextBirthday = getNextBirthday();
    
    // Normalize dates to midnight to avoid timezone issues
    const nowMidnight = new Date(now.getFullYear(), now.getMonth(), now.getDate());
    const birthdayMidnight = new Date(nextBirthday.getFullYear(), nextBirthday.getMonth(), nextBirthday.getDate());
    
    const timeDiff = birthdayMidnight.getTime() - nowMidnight.getTime();
    
    if (timeDiff <= 0) {
        // It's birthday! Refresh page
        location.reload();
        return;
    }
    
    const days = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
    const hours = Math.floor((timeDiff % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));
    const minutes = Math.floor((timeDiff % (1000 * 60 * 60)) / (1000 * 60));
    const seconds = Math.floor((timeDiff % (1000 * 60)) / 1000);
    
    document.getElementById('daysCount').textContent = days.toString().padStart(3, '0');
    document.getElementById('hoursCount').textContent = hours.toString().padStart(2, '0');
    document.getElementById('minutesCount').textContent = minutes.toString().padStart(2, '0');
    document.getElementById('secondsCount').textContent = seconds.toString().padStart(2, '0');
}

// Get next birthday date
function getNextBirthday() {
    const today = new Date();
    const [month, day] = BIRTHDAY_DATE.split('-');
    const currentYear = today.getFullYear();
    
    let nextBirthday = new Date(currentYear, parseInt(month) - 1, parseInt(day));
    
    if (nextBirthday < today) {
        nextBirthday = new Date(currentYear + 1, parseInt(month) - 1, parseInt(day));
    }
    
    return nextBirthday;
}

// Show daily thought card
function showDailyThoughtCard() {
    const thoughtText = document.getElementById('thoughtText');
    const dayCounter = document.getElementById('dayCounter');
    const progressFill = document.getElementById('progressFill');
    
    // Get today's thought
    const todayThought = dailyThoughts[currentDayOfYear - 1] || dailyThoughts[0];
    
    thoughtText.textContent = todayThought;
    dayCounter.textContent = `рджрд┐рд╡рд╕ ${currentDayOfYear} / 365`;
    
    // Update progress bar
    const progressPercentage = (currentDayOfYear / 365) * 100;
    progressFill.style.width = progressPercentage + '%';
}

// Update statistics
function updateStats() {
    const today = new Date();
    const birthDate = new Date(BIRTH_YEAR, 8, 27);
    
    // Calculate years, months, and days since birth
    let years = today.getFullYear() - birthDate.getFullYear();
    let months = today.getMonth() - birthDate.getMonth();
    let days = today.getDate() - birthDate.getDate();
    
    // Adjust for negative days
    if (days < 0) {
        months--;
        const lastMonth = new Date(today.getFullYear(), today.getMonth(), 0);
        days += lastMonth.getDate();
    }
    
    // Adjust for negative months
    if (months < 0) {
        years--;
        months += 12;
    }
    
    // Update displays with current age breakdown
    document.getElementById('daysAlive').textContent = days;
    document.getElementById('monthsAlive').textContent = months;
    document.getElementById('yearsAlive').textContent = years;
}

// Share thought function
function shareThought() {
    const thoughtText = document.getElementById('thoughtText').textContent;
    const dayCounter = document.getElementById('dayCounter').textContent;
    
    const shareText = `${thoughtText}\n\n${dayCounter}\n\n#AnkitaBirthday #DailyThought #Inspiration`;
    
    if (navigator.share) {
        navigator.share({
            title: 'рдЖрдЬрдЪрд╛ рд╡рд┐рдЪрд╛рд░',
            text: shareText
        });
    } else {
        // Fallback: copy to clipboard
        navigator.clipboard.writeText(shareText).then(() => {
            alert('рд╡рд┐рдЪрд╛рд░ рдХреЙрдкреА рдХреЗрд▓рд╛ рдЧреЗрд▓рд╛!');
        });
    }
}

// Save thought function
function saveThought() {
    const thoughtText = document.getElementById('thoughtText').textContent;
    const dayCounter = document.getElementById('dayCounter').textContent;
    
    // Save to localStorage
    const savedThoughts = JSON.parse(localStorage.getItem('savedThoughts') || '[]');
    const newThought = {
        text: thoughtText,
        day: dayCounter,
        date: new Date().toLocaleDateString('mr-IN'),
        timestamp: Date.now()
    };
    
    savedThoughts.push(newThought);
    localStorage.setItem('savedThoughts', JSON.stringify(savedThoughts));
    
    alert('рд╡рд┐рдЪрд╛рд░ рд╕реЗрд╡реНрд╣ рдХреЗрд▓рд╛ рдЧреЗрд▓рд╛! ЁЯТ╛');
}

// Show daily thought
function showDailyThought() {
    const dailyThought = document.getElementById('dailyThought');
    const thoughtText = document.getElementById('thoughtText');
    const dayCounter = document.getElementById('dayCounter');
    
    // Get today's thought
    const todayThought = dailyThoughts[currentDayOfYear - 1] || dailyThoughts[0];
    
    thoughtText.textContent = todayThought;
    dayCounter.textContent = `рджрд┐рд╡рд╕ ${currentDayOfYear} / 365`;
    
    // Show with animation
    setTimeout(() => {
        dailyThought.classList.add('show');
    }, 1000);
}

// Show birthday message
function showBirthdayMessage() {
    // This will be handled by the existing birthday animation sequence
    console.log("Happy Birthday Ankita! ЁЯОВ");
}

// Update date display
function updateDateDisplay() {
    const currentDateElement = document.getElementById('currentDate');
    const daysUntilBirthdayElement = document.getElementById('daysUntilBirthday');
    
    const today = new Date();
    const dateOptions = { 
        weekday: 'long', 
        year: 'numeric', 
        month: 'long', 
        day: 'numeric' 
    };
    
    currentDateElement.textContent = today.toLocaleDateString('mr-IN', dateOptions);
    
    if (isBirthdayToday) {
        daysUntilBirthdayElement.textContent = "ЁЯОВ рдЖрдЬ рддреБрдордЪрд╛ рд╡рд╛рдврджрд┐рд╡рд╕! ЁЯОВ";
        daysUntilBirthdayElement.style.color = "#FFD700";
        daysUntilBirthdayElement.style.fontSize = "1.1rem";
        daysUntilBirthdayElement.style.textShadow = "0 0 15px #FFD700";
    } else {
        const daysUntil = calculateDaysUntilBirthday();
        daysUntilBirthdayElement.textContent = `${daysUntil} рджрд┐рд╡рд╕рд╛рдВрдиреА рдкреБрдиреНрд╣рд╛ рдпреЗрдгрд╛рд░ рдзрдорд╛рд▓!`;
        daysUntilBirthdayElement.style.color = "#ff6b6b";
    }
}

// Calculate days until next birthday
function calculateDaysUntilBirthday() {
    const today = new Date();
    const currentYear = today.getFullYear();
    const [month, day] = BIRTHDAY_DATE.split('-');
    
    let nextBirthday = new Date(currentYear, parseInt(month) - 1, parseInt(day));
    
    // If birthday has passed this year, calculate for next year
    if (nextBirthday < today) {
        nextBirthday = new Date(currentYear + 1, parseInt(month) - 1, parseInt(day));
    }
    
    // Normalize dates to midnight to avoid timezone issues
    const todayMidnight = new Date(today.getFullYear(), today.getMonth(), today.getDate());
    const birthdayMidnight = new Date(nextBirthday.getFullYear(), nextBirthday.getMonth(), nextBirthday.getDate());
    
    const timeDiff = birthdayMidnight.getTime() - todayMidnight.getTime();
    const daysDiff = Math.floor(timeDiff / (1000 * 60 * 60 * 24));
    
    return daysDiff;
}

// Auto-refresh daily thought at midnight
function setupMidnightRefresh() {
    const now = new Date();
    const tomorrow = new Date(now);
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);
    
    const timeUntilMidnight = tomorrow.getTime() - now.getTime();
    
    setTimeout(() => {
        location.reload(); // Refresh page at midnight for new thought
    }, timeUntilMidnight);
}

// Modern Effects Initialization
function initModernEffects() {
    createParticleSystem();
    initCursorTrail();
}

// Modern Particle System
function createParticleSystem() {
    const particleSystem = document.getElementById('particleSystem');
    
    setInterval(() => {
        const particle = document.createElement('div');
        particle.className = 'modern-particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 2 + 's';
        particle.style.animationDuration = (Math.random() * 3 + 5) + 's';
        
        particleSystem.appendChild(particle);
        
        setTimeout(() => {
            particle.remove();
        }, 8000);
    }, 200);
}

// Interactive Cursor Trail
function initCursorTrail() {
    let mouseX = 0, mouseY = 0;
    let trail = [];
    
    document.addEventListener('mousemove', (e) => {
        mouseX = e.clientX;
        mouseY = e.clientY;
        
        // Create cursor trail effect
        if (Math.random() > 0.7) {
            const trailDot = document.createElement('div');
            trailDot.className = 'cursor-trail';
            trailDot.style.left = mouseX + 'px';
            trailDot.style.top = mouseY + 'px';
            document.body.appendChild(trailDot);
            
            setTimeout(() => {
                trailDot.remove();
            }, 500);
        }
    });
}

// Advanced Background System
function initAdvancedBackground() {
    createGeometricPatterns();
    createBackgroundParticles();
    initParallaxEffects();
    initInteractiveBackground();
    initColorMorphing();
}

// Geometric Patterns
function createGeometricPatterns() {
    const patternsContainer = document.getElementById('geometricPatterns');
    const shapes = ['triangle', 'circle', 'square'];
    
    setInterval(() => {
        const shape = document.createElement('div');
        shape.className = `geometric-shape ${shapes[Math.floor(Math.random() * shapes.length)]}`;
        shape.style.left = Math.random() * 100 + '%';
        shape.style.animationDelay = Math.random() * 2 + 's';
        shape.style.animationDuration = (Math.random() * 10 + 15) + 's';
        
        patternsContainer.appendChild(shape);
        
        setTimeout(() => {
            shape.remove();
        }, 25000);
    }, 3000);
}

// Background Particles
function createBackgroundParticles() {
    const particlesContainer = document.getElementById('bgParticles');
    
    setInterval(() => {
        const particle = document.createElement('div');
        particle.className = 'bg-particle';
        particle.style.left = Math.random() * 100 + '%';
        particle.style.animationDelay = Math.random() * 2 + 's';
        particle.style.animationDuration = (Math.random() * 5 + 10) + 's';
        
        particlesContainer.appendChild(particle);
        
        setTimeout(() => {
            particle.remove();
        }, 15000);
    }, 500);
}

// Parallax Effects
function initParallaxEffects() {
    const layers = [
        document.getElementById('parallaxLayer1'),
        document.getElementById('parallaxLayer2'),
        document.getElementById('parallaxLayer3')
    ];
    
    document.addEventListener('mousemove', (e) => {
        const x = (e.clientX / window.innerWidth) * 100;
        const y = (e.clientY / window.innerHeight) * 100;
        
        layers.forEach((layer, index) => {
            const speed = (index + 1) * 0.5;
            const moveX = (x - 50) * speed;
            const moveY = (y - 50) * speed;
            
            layer.style.transform = `translate(${moveX}px, ${moveY}px)`;
        });
    });
}

// Interactive Background
function initInteractiveBackground() {
    const dynamicBg = document.getElementById('dynamicBg');
    const interactiveEffect = document.getElementById('interactiveBgEffect');
    
    document.addEventListener('mousemove', (e) => {
        const x = (e.clientX / window.innerWidth) * 100;
        const y = (e.clientY / window.innerHeight) * 100;
        
        // Update dynamic background
        dynamicBg.style.setProperty('--mouse-x', x + '%');
        dynamicBg.style.setProperty('--mouse-y', y + '%');
        dynamicBg.style.setProperty('--mouse-x2', (100 - x) + '%');
        dynamicBg.style.setProperty('--mouse-y2', (100 - y) + '%');
        dynamicBg.style.setProperty('--mouse-x3', (x + 20) % 100 + '%');
        dynamicBg.style.setProperty('--mouse-y3', (y + 20) % 100 + '%');
        
        // Update interactive effect
        interactiveEffect.style.setProperty('--interactive-x', x + '%');
        interactiveEffect.style.setProperty('--interactive-y', y + '%');
        interactiveEffect.classList.add('active');
    });

    document.addEventListener('mouseleave', () => {
        interactiveEffect.classList.remove('active');
    });
}

// Color Morphing
function initColorMorphing() {
    const colorMorph = document.getElementById('colorMorph');
    const colors = [
        ['#1e3c72', '#2a5298', '#4dabf7', '#51cf66'],
        ['#ff6b6b', '#ee5a52', '#ffd43b', '#fab005'],
        ['#da77f2', '#cc5de8', '#845ef7', '#7950f2'],
        ['#51cf66', '#40c057', '#37b24d', '#2f9e44']
    ];
    
    let currentColorIndex = 0;
    
    setInterval(() => {
        const currentColors = colors[currentColorIndex];
        colorMorph.style.setProperty('--color-1', currentColors[0]);
        colorMorph.style.setProperty('--color-2', currentColors[1]);
        colorMorph.style.setProperty('--color-3', currentColors[2]);
        colorMorph.style.setProperty('--color-4', currentColors[3]);
        
        currentColorIndex = (currentColorIndex + 1) % colors.length;
    }, 8000);
}

// Dynamic Lighting
function initDynamicLighting() {
    const lightingEffect = document.getElementById('lightingEffect');
    
    document.addEventListener('mousemove', (e) => {
        const x = (e.clientX / window.innerWidth) * 100;
        const y = (e.clientY / window.innerHeight) * 100;
        
        lightingEffect.style.setProperty('--mouse-x', x + '%');
        lightingEffect.style.setProperty('--mouse-y', y + '%');
        lightingEffect.classList.add('active');
    });

    document.addEventListener('mouseleave', () => {
        lightingEffect.classList.remove('active');
    });
}

// Interactive Fireworks
function initInteractiveFireworks() {
    const fireworkContainer = document.getElementById('fireworkContainer');
    
    document.addEventListener('click', (e) => {
        if (e.target.id !== 'cakeContainer' && !e.target.closest('.cake-container') && 
            !e.target.closest('.photo-gallery')) {
            createInteractiveFirework(e.clientX, e.clientY);
        }
    });
}

function createInteractiveFirework(x, y) {
    const colors = ['#ff6b6b', '#4dabf7', '#51cf66', '#ffd43b', '#da77f2', '#FFD700'];
    const particleCount = 20;
    
    for (let i = 0; i < particleCount; i++) {
        const particle = document.createElement('div');
        particle.className = 'interactive-firework';
        particle.style.left = x + 'px';
        particle.style.top = y + 'px';
        particle.style.background = colors[Math.floor(Math.random() * colors.length)];
        
        const angle = (i / particleCount) * Math.PI * 2;
        const velocity = Math.random() * 200 + 100;
        const vx = Math.cos(angle) * velocity;
        const vy = Math.sin(angle) * velocity;
        
        particle.style.transform = `translate(${vx}px, ${vy}px)`;
        particle.style.transition = 'all 1s ease-out';
        particle.style.opacity = '1';
        
        document.body.appendChild(particle);
        
        setTimeout(() => {
            particle.style.opacity = '0';
            particle.style.transform = `translate(${vx * 1.5}px, ${vy * 1.5}px) scale(0)`;
        }, 100);
        
        setTimeout(() => {
            particle.remove();
        }, 1100);
    }
}

// Advanced Photo Gallery System
const photoData = [
    { src: "image/1.jpg", title: "Birthday Cake Memory", emoji: "ЁЯОВ" },
    { src: "image/2.jpg", title: "Celebration Time", emoji: "ЁЯОЙ" },
    { src: "image/3.jpg", title: "Magical Moments", emoji: "тЬи" },
    { src: "image/4.jpg", title: "Special Gift", emoji: "ЁЯОБ" },
    { src: "image/5.jpg", title: "Star Moments", emoji: "ЁЯМЯ" },
    { src: "image/6.jpg", title: "Love & Joy", emoji: "ЁЯТЦ" },
    { src: "image/7.jpg", title: "Fun Times", emoji: "ЁЯШК" },
    { src: "image/8.jpg", title: "Happy Moments", emoji: "ЁЯе│" },
    { src: "image/9.jpg", title: "Sweet Memories", emoji: "ЁЯН░" },
    { src: "image/10.jpg", title: "Party Time", emoji: "ЁЯОК" },
    { src: "image/11.jpg", title: "Celebration", emoji: "ЁЯОИ" },
    { src: "image/12.jpg", title: "Special Day", emoji: "ЁЯОВ" },
    { src: "image/13.jpg", title: "Joy & Happiness", emoji: "ЁЯШД" },
    { src: "image/14.jpg", title: "Beautiful Moments", emoji: "ЁЯМ╕" },
    { src: "image/15.jpg", title: "Amazing Times", emoji: "ЁЯМЯ" },
    { src: "image/17.jpg", title: "WhatsApp Memory", emoji: "ЁЯТЭ" }
];

let currentPhotoIndex = 0;
let photoModalOpen = false;

// Memory System
const memories = [
    {
        title: "Birthday Cake Memory ЁЯОВ",
        text: "Remember the first time we celebrated your birthday? The joy in your eyes was priceless! Here's to many more amazing years ahead!"
    },
    {
        title: "Celebration Time ЁЯОЙ",
        text: "Every moment with you is a celebration! Your laughter brings so much happiness to everyone around you. Keep shining bright!"
    },
    {
        title: "Magical Moments тЬи",
        text: "You have this magical ability to make ordinary days feel special. Thank you for bringing so much light into our lives!"
    },
    {
        title: "Special Gift ЁЯОБ",
        text: "Every gift you receive is a symbol of the love and care people have for you. You deserve all the beautiful things in the world!"
    },
    {
        title: "Star Moments ЁЯМЯ",
        text: "You shine like a star in everyone's life. Your presence makes every moment brighter and more meaningful!"
    },
    {
        title: "Party Fun ЁЯОЙ",
        text: "Birthday parties are always more fun with you around! Your energy and enthusiasm make every celebration memorable!"
    },
    {
        title: "Balloon Adventures ЁЯОИ",
        text: "Like colorful balloons floating high, your dreams and aspirations soar to new heights. Keep reaching for the stars!"
    },
    {
        title: "Cake Celebration ЁЯОВ",
        text: "Every birthday cake tells a story of love, laughter, and precious moments shared. Here's to sweet memories and sweeter years ahead!"
    },
    {
        title: "Love & Joy ЁЯТЦ",
        text: "Your heart is full of love and joy, and it spreads to everyone around you. Thank you for being such a wonderful person!"
    }
];

function showMemory(index) {
    const memoryMessage = document.getElementById('memoryMessage');
    const memoryTitle = document.getElementById('memoryTitle');
    const memoryText = document.getElementById('memoryText');
    
    if (memories[index]) {
        memoryTitle.textContent = memories[index].title;
        memoryText.textContent = memories[index].text;
        memoryMessage.classList.remove('hide');
        memoryMessage.classList.add('show');
    }
}

function hideMemory() {
    const memoryMessage = document.getElementById('memoryMessage');
    memoryMessage.classList.remove('show');
    memoryMessage.classList.add('hide');
}

// Advanced Photo Gallery Functions
function toggleGallery() {
    const photoModal = document.getElementById('photoModal');
    photoModalOpen = !photoModalOpen;
    
    if (photoModalOpen) {
        openPhotoGallery();
    } else {
        closePhotoGallery();
    }
}

function openPhotoGallery() {
    const photoModal = document.getElementById('photoModal');
    photoModal.style.display = 'flex';
    photoModalOpen = true;
    
    // Initialize carousel with first photo
    currentPhotoIndex = 0;
    updateCarousel();
    generateThumbnails();
    
    // Add keyboard navigation
    document.addEventListener('keydown', handlePhotoGalleryKeyboard);
    
    // Add touch/swipe support
    addSwipeSupport();
    
    // Create entrance animation
    setTimeout(() => {
        photoModal.style.opacity = '1';
    }, 10);
}

function closePhotoGallery() {
    const photoModal = document.getElementById('photoModal');
    photoModal.style.opacity = '0';
    photoModalOpen = false;
    
    // Remove event listeners
    document.removeEventListener('keydown', handlePhotoGalleryKeyboard);
    
    setTimeout(() => {
        photoModal.style.display = 'none';
    }, 300);
}

function updateCarousel() {
    const carouselImage = document.getElementById('carouselImage');
    const photoCounter = document.getElementById('photoCounter');
    const photoTitle = document.getElementById('photoTitle');
    
    if (photoData[currentPhotoIndex]) {
        carouselImage.src = photoData[currentPhotoIndex].src;
        photoCounter.textContent = `${currentPhotoIndex + 1} / ${photoData.length}`;
        photoTitle.textContent = photoData[currentPhotoIndex].title;
        
        // Add zoom effect on load
        carouselImage.style.transform = 'scale(0.8)';
        setTimeout(() => {
            carouselImage.style.transform = 'scale(1)';
        }, 100);
    }
    
    updateThumbnailSelection();
}

function nextPhoto() {
    currentPhotoIndex = (currentPhotoIndex + 1) % photoData.length;
    updateCarousel();
    createPhotoTransitionEffect();
}

function previousPhoto() {
    currentPhotoIndex = (currentPhotoIndex - 1 + photoData.length) % photoData.length;
    updateCarousel();
    createPhotoTransitionEffect();
}

function goToPhoto(index) {
    currentPhotoIndex = index;
    updateCarousel();
    createPhotoTransitionEffect();
}

function generateThumbnails() {
    const thumbnailsContainer = document.getElementById('photoThumbnails');
    thumbnailsContainer.innerHTML = '';
    
    photoData.forEach((photo, index) => {
        const thumbnail = document.createElement('div');
        thumbnail.className = 'thumbnail';
        thumbnail.onclick = () => goToPhoto(index);
        
        const img = document.createElement('img');
        img.src = photo.src;
        img.alt = photo.title;
        
        thumbnail.appendChild(img);
        thumbnailsContainer.appendChild(thumbnail);
    });
    
    updateThumbnailSelection();
}

function updateThumbnailSelection() {
    const thumbnails = document.querySelectorAll('.thumbnail');
    thumbnails.forEach((thumb, index) => {
        thumb.classList.toggle('active', index === currentPhotoIndex);
    });
}

function createPhotoTransitionEffect() {
    const carouselImage = document.getElementById('carouselImage');
    carouselImage.style.transform = 'scale(0.9)';
    carouselImage.style.opacity = '0.7';
    
    setTimeout(() => {
        carouselImage.style.transform = 'scale(1)';
        carouselImage.style.opacity = '1';
    }, 150);
}

function handlePhotoGalleryKeyboard(e) {
    if (!photoModalOpen) return;
    
    switch(e.key) {
        case 'Escape':
            closePhotoGallery();
            break;
        case 'ArrowLeft':
            previousPhoto();
            break;
        case 'ArrowRight':
            nextPhoto();
            break;
        case ' ':
            e.preventDefault();
            nextPhoto();
            break;
    }
}

function addSwipeSupport() {
    const carouselContainer = document.querySelector('.carousel-container');
    let startX = 0;
    let startY = 0;
    let isSwipe = false;
    
    carouselContainer.addEventListener('touchstart', (e) => {
        startX = e.touches[0].clientX;
        startY = e.touches[0].clientY;
        isSwipe = true;
    });
    
    carouselContainer.addEventListener('touchmove', (e) => {
        if (!isSwipe) return;
        
        const currentX = e.touches[0].clientX;
        const currentY = e.touches[0].clientY;
        const diffX = startX - currentX;
        const diffY = startY - currentY;
        
        // Check if it's a horizontal swipe
        if (Math.abs(diffX) > Math.abs(diffY) && Math.abs(diffX) > 50) {
            if (diffX > 0) {
                nextPhoto();
            } else {
                previousPhoto();
            }
            isSwipe = false;
        }
    });
    
    carouselContainer.addEventListener('touchend', () => {
        isSwipe = false;
    });
}

// Auto-play slideshow
function startSlideshow() {
    if (photoModalOpen) {
        setTimeout(() => {
            nextPhoto();
            startSlideshow();
        }, 4000);
    }
}

// Enhanced photo effects
function addPhotoParallaxEffect() {
    const photoFrames = document.querySelectorAll('.photo-frame');
    
    document.addEventListener('mousemove', (e) => {
        const mouseX = e.clientX / window.innerWidth;
        const mouseY = e.clientY / window.innerHeight;
        
        photoFrames.forEach((frame, index) => {
            const speed = (index + 1) * 0.1;
            const x = (mouseX - 0.5) * speed * 10;
            const y = (mouseY - 0.5) * speed * 10;
            
            frame.style.transform = `translate(${x}px, ${y}px)`;
        });
    });
}

// Initialize photo gallery on page load
function initPhotoGallery() {
    // Add parallax effect to photo frames
    addPhotoParallaxEffect();
    
    // Add click effects to photos
    const photoFrames = document.querySelectorAll('.photo-frame');
    photoFrames.forEach(frame => {
        frame.addEventListener('click', () => {
            createSparkles(frame.offsetLeft + frame.offsetWidth/2, frame.offsetTop + frame.offsetHeight/2);
        });
    });
}

// Enhanced Effects
function createHearts(x, y) {
    for (let i = 0; i < 5; i++) {
        const heart = document.createElement('div');
        heart.className = 'heart';
        heart.textContent = 'ЁЯТЦ';
        heart.style.left = (x + Math.random() * 100 - 50) + 'px';
        heart.style.top = y + 'px';
        heart.style.fontSize = (Math.random() * 20 + 15) + 'px';
        document.body.appendChild(heart);
        
        setTimeout(() => heart.remove(), 3000);
    }
}

function createSparkles(x, y) {
    for (let i = 0; i < 8; i++) {
        const sparkle = document.createElement('div');
        sparkle.className = 'sparkle';
        sparkle.textContent = 'тЬи';
        sparkle.style.left = (x + Math.random() * 80 - 40) + 'px';
        sparkle.style.top = (y + Math.random() * 80 - 40) + 'px';
        sparkle.style.fontSize = (Math.random() * 15 + 10) + 'px';
        document.body.appendChild(sparkle);
        
        setTimeout(() => sparkle.remove(), 1000);
    }
}


// Birthday Countdown Function (3, 2, 1, Boom!)
function startBirthdayCountdown() {
    const birthdayCountdown = document.getElementById('birthdayCountdown');
    let count = 3;
    
    const countInterval = setInterval(() => {
        if (count > 1) {
            count--;
            birthdayCountdown.textContent = count;
            birthdayCountdown.style.animation = 'birthdayCountdownPulse 1s ease-in-out';
        } else if (count === 1) {
            birthdayCountdown.textContent = 'Boom!';
            birthdayCountdown.className = 'birthday-countdown boom';
            count--;
        } else {
            birthdayCountdown.style.display = 'none';
            clearInterval(countInterval);
            startMatrixEffect();
            // Start birthday celebration after countdown
            setTimeout(() => {
                startBirthdayCelebration();
            }, 1000);
        }
    }, 1000);
}

// Matrix Effect
function startMatrixEffect() {
    const matrix = document.getElementById('matrix');
    matrix.style.opacity = '1';
    
    const chars = '01уВвуВдуВжуВиуВкуВлуВнуВпуВ▒уВ│уВ╡уВ╖уВ╣уВ╗уВ╜уВ┐уГБуГДуГЖуГИуГКуГЛуГМуГНуГОуГПуГТуГХуГШуГЫуГЮуГЯуГауГбуГвуГдуГжуГиуГйуГкуГлуГмуГнуГпуГ▓уГ│';
    
    for (let i = 0; i < 30; i++) {
        setTimeout(() => {
            const char = document.createElement('div');
            char.className = 'matrix-char';
            char.textContent = chars[Math.floor(Math.random() * chars.length)];
            char.style.left = Math.random() * 100 + '%';
            char.style.animationDelay = Math.random() * 1 + 's';
            matrix.appendChild(char);
            
            setTimeout(() => {
                char.remove();
            }, 2500);
        }, i * 80);
    }
    
    setTimeout(() => {
        matrix.style.opacity = '0';
        startTypingAnimation();
    }, 1000);
}

// Typing Animation
function startTypingAnimation() {
    const container = document.getElementById('typingContainer');
    const textElement = document.getElementById('typedText');
    const text = 'Happy Birthday Ankita ЁЯОЙ';
    
    container.style.opacity = '1';
    
    let index = 0;
    const typeInterval = setInterval(() => {
        if (index < text.length) {
            textElement.textContent += text.charAt(index);
            index++;
        } else {
            clearInterval(typeInterval);
            // Add rainbow effect to the text
            textElement.classList.add('rainbow');
            setTimeout(() => {
                startFireworks();
                createBalloons();
                startEmojiAnimation();
                showCake();
                showBlessing();
            }, 500);
        }
    }, 150);
}

// Fireworks
function startFireworks() {
    setInterval(() => {
        createFirework();
    }, 800);
}

function createFirework() {
    const colors = ['#ff6b6b', '#4dabf7', '#51cf66', '#ffd43b', '#da77f2'];
    const x = Math.random() * window.innerWidth;
    const y = Math.random() * window.innerHeight * 0.6;
    
    for (let i = 0; i < 12; i++) {
        const spark = document.createElement('div');
        spark.className = 'firework';
        spark.style.left = x + 'px';
        spark.style.top = y + 'px';
        spark.style.background = colors[Math.floor(Math.random() * colors.length)];
        spark.style.animation = `fireworkExplode 1s ease-out forwards`;
        spark.style.transform = `rotate(${i * 30}deg) translateX(100px)`;
        
        document.body.appendChild(spark);
        
        setTimeout(() => {
            spark.remove();
        }, 1000);
    }
}

// Balloons
function createBalloons() {
    const colors = ['red', 'blue', 'green', 'yellow', 'purple'];
    
    for (let i = 0; i < 8; i++) {
        setTimeout(() => {
            const balloon = document.createElement('div');
            balloon.className = `balloon ${colors[Math.floor(Math.random() * colors.length)]}`;
            balloon.style.left = Math.random() * (window.innerWidth - 80) + 'px';
            balloon.style.top = window.innerHeight + 'px';
            balloon.style.animation = `balloonFloat 4s ease-in-out infinite, balloonRise 3s ease-out forwards`;
            
            balloon.onclick = () => popBalloon(balloon);
            
            document.body.appendChild(balloon);
            balloons.push(balloon);
            
            // Animate balloon rising
            setTimeout(() => {
                balloon.style.top = Math.random() * (window.innerHeight * 0.3) + 100 + 'px';
            }, 100);
        }, i * 300);
    }
}

function popBalloon(balloon) {
    balloon.className += ' balloon-pop';
    
    // Create pop effect
    for (let i = 0; i < 6; i++) {
        const particle = document.createElement('div');
        particle.textContent = 'ЁЯОЙ';
        particle.style.position = 'absolute';
        particle.style.left = balloon.offsetLeft + 'px';
        particle.style.top = balloon.offsetTop + 'px';
        particle.style.fontSize = '2rem';
        particle.style.animation = `confettiFall 2s ease-out forwards`;
        particle.style.transform = `rotate(${Math.random() * 360}deg)`;
        document.body.appendChild(particle);
        
        setTimeout(() => particle.remove(), 2000);
    }
    
    setTimeout(() => balloon.remove(), 500);
}

// Emoji Animation
function startEmojiAnimation() {
    const emojis = ['ЁЯОВ', 'ЁЯОИ', 'ЁЯОЙ', 'ЁЯОБ', 'тЬи', 'ЁЯМЯ', 'ЁЯТЦ', 'ЁЯОК'];
    
    setInterval(() => {
        const emoji = document.createElement('div');
        emoji.className = 'floating-emoji';
        emoji.textContent = emojis[Math.floor(Math.random() * emojis.length)];
        emoji.style.left = Math.random() * window.innerWidth + 'px';
        emoji.style.animationDelay = Math.random() * 2 + 's';
        
        document.body.appendChild(emoji);
        
        setTimeout(() => {
            emoji.remove();
        }, 6000);
    }, 1000);
}

// Show Cake
function showCake() {
    const cakeContainer = document.getElementById('cakeContainer');
    const cakeHint = document.getElementById('cakeHint');
    cakeContainer.style.opacity = '1';
    
    // Show hint after a delay
    setTimeout(() => {
        cakeHint.style.opacity = '1';
    }, 2000);
    
    cakeContainer.onclick = () => blowCandles();
}

// Blow Candles
function blowCandles() {
    const cakeHint = document.getElementById('cakeHint');
    cakeHint.style.opacity = '0'; // Hide hint when cake is clicked
    
    const candles = document.querySelectorAll('.candle');
    candles.forEach((candle, index) => {
        setTimeout(() => {
            candle.classList.add('blown-out');
            createFirework(); // Extra fireworks when candles are blown
        }, index * 200);
    });
    
    setTimeout(() => {
        showModal();
    }, 2000);
}

// Show Blessing with Typing Animation
function showBlessing() {
    setTimeout(() => {
        const blessing = document.getElementById('blessing');
        blessing.style.opacity = '1';
        blessingShown = true;
        startBlessingTyping();
    }, 1000); // Reduced from 3000ms to 1000ms
}

// Auto-cycle through blessing messages with typing effect
function startBlessingTyping() {
    let currentMessageIndex = 0;
    
    function typeNextMessage() {
        const blessing = document.getElementById('blessing');
        const message = blessingMessages[currentMessageIndex];
        
        // Clear previous message
        blessing.textContent = '';
        
        // Type the message character by character
        let charIndex = 0;
        const typeInterval = setInterval(() => {
            if (charIndex < message.length) {
                blessing.textContent += message.charAt(charIndex);
                charIndex++;
            } else {
                clearInterval(typeInterval);
                
                // Wait 1 second, then move to next message
                setTimeout(() => {
                    currentMessageIndex = (currentMessageIndex + 1) % blessingMessages.length;
                    typeNextMessage();
                }, 1000); // Reduced from 2000ms to 1000ms
            }
        }, 50); // Typing speed - increased from 100ms to 50ms
    }
    
    // Start the first message
    typeNextMessage();
}

// Enhanced Click Effects with Modern Animations
document.body.addEventListener('click', (e) => {
    if (e.target.id !== 'cakeContainer' && !e.target.closest('.cake-container')) {
        createConfetti(e.clientX, e.clientY);
        createHearts(e.clientX, e.clientY);
        createSparkles(e.clientX, e.clientY);
        createModernRipple(e.clientX, e.clientY);
    }
});

// Modern Ripple Effect
function createModernRipple(x, y) {
    const ripple = document.createElement('div');
    ripple.style.position = 'fixed';
    ripple.style.left = x + 'px';
    ripple.style.top = y + 'px';
    ripple.style.width = '0px';
    ripple.style.height = '0px';
    ripple.style.borderRadius = '50%';
    ripple.style.background = 'radial-gradient(circle, rgba(255,107,107,0.3), transparent)';
    ripple.style.transform = 'translate(-50%, -50%)';
    ripple.style.pointerEvents = 'none';
    ripple.style.zIndex = '1000';
    ripple.style.animation = 'rippleExpand 0.6s ease-out forwards';
    
    document.body.appendChild(ripple);
    
    setTimeout(() => {
        ripple.remove();
    }, 600);
}

// Add ripple animation
const style = document.createElement('style');
style.textContent = `
    @keyframes rippleExpand {
        0% {
            width: 0px;
            height: 0px;
            opacity: 1;
        }
        100% {
            width: 200px;
            height: 200px;
            opacity: 0;
        }
    }
`;
document.head.appendChild(style);

function createConfetti(x, y) {
    const colors = ['#ff6b6b', '#4dabf7', '#51cf66', '#ffd43b', '#da77f2', '#FFD700'];
    
    for (let i = 0; i < 15; i++) {
        const confetti = document.createElement('div');
        confetti.className = 'confetti';
        confetti.style.left = x + 'px';
        confetti.style.top = y + 'px';
        confetti.style.background = colors[Math.floor(Math.random() * colors.length)];
        confetti.style.animation = `confettiFall 3s linear forwards`;
        confetti.style.animationDelay = Math.random() * 0.5 + 's';
        
        document.body.appendChild(confetti);
        
        setTimeout(() => {
            confetti.remove();
        }, 3000);
    }
}

// Modal Functions
function showModal() {
    document.getElementById('modal').style.display = 'flex';
}

function closeModal() {
    document.getElementById('modal').style.display = 'none';
    showFinalScene();
}

// Final Scene
function showFinalScene() {
    // Hide all elements
    document.getElementById('typingContainer').style.opacity = '0';
    document.getElementById('cakeContainer').style.opacity = '0';
    document.getElementById('blessing').style.opacity = '0';
    
    // Stop all animations
    document.querySelectorAll('.floating-emoji, .balloon, .confetti').forEach(el => {
        el.style.animationPlayState = 'paused';
    });
    
    // Show final message
    setTimeout(() => {
        document.getElementById('finalMessage').style.opacity = '1';
    }, 1000);
}
